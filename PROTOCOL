Universal Password Changer (UPwdChg)
====================================

This document will detail the "protocol" underlying the Universal Password
Changer, such as to hopefully allow users to appraise its security.


Peers
-----

There are three peers involved in the various data exchange required to
perform a password change:

- The USER: the actual user (individual) requesting a password change

- The FRONTEND: the server/application implementing the USER interface

- The BACKEND: the server performing the actual password change

It is critical to understand what differentiates the FRONTEND from the BACKEND
peer and why those SHOULD NOT be hosted on the same server:

- In order to perform password changes, the BACKEND peer may require
  administrative privileges, potentially the highest privileges that exist,
  e.g. those of LDAP, Kerberos or Active Diretory administators.

- It is clearly not a good idea to expose a server with such privileges directly
  to users, through a public-accessible (web) interface, the attack surface of
  the latter being way to big for the risks at stake.

- The user interface is thus delegated to the FRONTEND peer, which will interact
  with the BACKEND peer through a well-defined, low-footprint, cryptographically-
  secured channel.

This implies that:

- Nothing that comes from the FRONTEND must be trusted. NEVER! Really!
  Especially more so since the FRONTEND, with its close-to-none privileges,
  may not have access to the necessary information to fully validate the USER
  input.

- Everything must be validated by the BACKEND. ALWAYS! Really!
  Especially more so since the BACKEND, thanks to its higher privileges,
  has access to all the relevant information to fully validate the USER input,
  received from the FRONTEND.

That secure channel and trust model are the particularity, the main purpose and
- hopefully! - the force of the Universal Password Changer (the user-customizable
processing "plugins" being more like "goodies" added to the project).


Forward Secrecy
---------------

The exchange taking place between the BACKEND and the FRONTEND being asynchro-
nous and connection-less, it is not possible to guarantee its forward secrecy,
e.g. thanks to the Diffie-Hellman type of algorithms.

Currently, only RSA asymmetric cryptography is supported, with plans to add
ECDSA (when supported by underlying dependencies).

This means that if an attacker gets hold:
- of "password change" tokens (temporarily stored on both BACKEND and FRONTEND)
- of the RSA private key (stored on the BACKEND)
He can decrypt any past tokens and access the corresponding credentials.


Actual Password Change Operation
--------------------------------

Please refer to the ad-hoc PROTOCOL.<operation> files.
