Universal Password Changer (UPwdChg)
====================================

This document will detail the "protocol" underlying the Universal Password
Changer, such as to hopefully allow users to appraise its security.


Password Change
---------------

In order to perform a password change, the following data exchange and processing
will take place:

1. USER -> FRONTEND -> BACKEND: "password-change" token

In details:

***** USER -> FRONTEND *****

* [SHOULD] USER authenticates on FRONTEND (using his username and old password)

  NOTE: Using the HTTP (server) basic authentication will prevent an attacker
        to access the (PHP) web application and attempt to exploit potential
        vulnerabilities

* [MUST] USER provides the FRONTEND with his username, old password and new password

***** FRONTEND *****

* [SHOULD] FRONTEND validates the old password (iow. performs authentication)

  NOTE: This is donely purely to avoid the BACKEND being easily flooded (DoS-ed)
        with invalid password change requests.

  NOTE: Nothing that comes from the FRONTEND must be trusted!
        Everything must be validated by the BACKEND (again)!

* [SHOULD] FRONTEND validates the new password according to the password policy

  NOTE: This is done purely out of user-friendliness and to avoid sending
        invalid password change requests to the BACKEND.

  NOTE: Nothing that comes from the FRONTEND must be trusted!
        Everything must be validated by the BACKEND (again)!

* [MUST] FRONTEND creates a "password-change" token:

  PSEUDO CODE:
    data = { timestamp, username, password-old, password-new }
    digest = HASH( data )
    key = RANDOM()
    iv = RANDOM()
    key-encrypted = PUBLIC_ENCRYPT( key, public-key )
    data-encrypted = SYMMETRIC_ENCRYPT( { data, digest }, key, iv )
    token = { key-encrypted, iv, data-encrypted }
    token-file = TIMESTAMP()+RANDOM()
    WRITE( token-file, token )

***** FRONTEND -> BACKEND *****

* [MUST] The token is transferred from the FRONTEND to the BACKEND

  NOTE: The way the transfer takes place is no business of UPwdChg.
        The easiest way is a common - but dedicated - NFS share (with
        appropriate permissions). One can also imagine using RSync,
        SCP, E-mail, Dropbox (...), etc.

  NOTE: Thanks to asymmetric (public/private key) cryptography, the
        token is readable by NO ONE save the BACKEND. It can thus be
        transferred through an insecure medium.

***** BACKEND *****

* [MUST] BACKEND decrypts the token:

  PSEUDO CODE:
    { key-encrypted, iv, data-encrypted } = token = READ( token-file )
    key = PRIVATE_DECRYPT( key-encrypted, private-key )
    { data, digest } = SYMMETRIC_DECRYPT( data-encrypted, key, iv )
    HASH( data ) == digest ?
    { timestamp, username, password-old, password-new } = data

* [MUST] BACKEND validates all received data:
    - timestamp (within time-to-live limit ?)
    - old credentials (username + old password)
    - new password (change + policy)

* [MUST] BACKEND performs the actual password change
