Universal Password Changer (UPwdChg)
====================================

This document will detail the "protocol" underlying the Universal Password
Changer, such as to hopefully allow users to appraise its security.


Password Change
---------------

In order to perform a password change, the following data exchange and processing
will take place:

1. USER -> FRONTEND -> BACKEND: "password-change" token

   1.a. USER -> FRONTEND

      * [SHOULD] USER authenticates on FRONTEND, using his username and old
        password

        NOTE: Using the HTTP (server) basic authentication will prevent an
        attacker to access the (PHP) web application and attempt to exploit
        potential vulnerabilities

      * [MUST] USER provides the FRONTEND with his username, old password and
        new password

   1.b. FRONTEND

      * [SHOULD] FRONTEND validates the old password (iow. performs authenti-
        cation)

        NOTE: This is donely purely to avoid the BACKEND being easily flooded
        (DoS-ed) with invalid password change requests.

        NOTE: Nothing that comes from the FRONTEND must be trusted!
        Everything must be validated by the BACKEND (again)!

      * [SHOULD] FRONTEND validates the new password according to the password
        policy

        NOTE: This is done purely out of user-friendliness and to avoid sending
        invalid password change requests to the BACKEND.

        NOTE: Nothing that comes from the FRONTEND must be trusted!
        Everything must be validated by the BACKEND (again)!

      * [MUST] FRONTEND creates a "password-change" token:

        PSEUDO CODE:
          timestamp = NOW()
          session-id = RANDOM()
          data = { timestamp, session-id, username,
                   password-old, password-new }
          digest = HASH( data )
          key = RANDOM()
          iv = RANDOM()
          key-encrypted = PUBLIC_ENCRYPT( key, backend-public-key )
          data-encrypted = SYMMETRIC_ENCRYPT( { data, digest }, key, iv )
          data-signature = PRIVATE_SIGN( data-encrypted, frontend-private-key )
          token = { key-encrypted, iv, data-encrypted, data-signature }
          token-file = TIMESTAMP()+RANDOM()
          WRITE( token-file, token )

   1.c. FRONTEND -> BACKEND

      * [MUST] The token is transferred from the FRONTEND to the BACKEND

        NOTE: The way the transfer takes place is no business of UPwdChg.
        The easiest way is a common - but dedicated - NFS share (with
        appropriate permissions). One can also imagine using RSync,
        SCP, E-mail, Dropbox (...), etc.

        NOTE: Thanks to (BACKEND's) public key (assymetric) encryption, the
        token is readable by NO ONE save the BACKEND. Also, thanks to
        the (FRONTEND's) private key signature, the token can be trusted
        to be originated from the FRONTEND. The token can thus be
        transferred through an insecure medium.

   d. BACKEND

      * [MUST] BACKEND decrypts the token:

        PSEUDO CODE:
          token = READ( token-file )
          token => { key-encrypted, iv, data-encrypted, data-signature }
          PUBLIC_VERIFY( data-encrypted, data-signature, frontend-public-key )
          key = PRIVATE_DECRYPT( key-encrypted, backend-private-key )
          { data, digest } = SYMMETRIC_DECRYPT( data-encrypted, key, iv )
          HASH( data ) == digest ?
          data => { timestamp, session-id, username,
                    password-old, password-new }

      * [MUST] BACKEND validates all received data:
          - timestamp (within time-to-live limit ?)
          - old credentials (username + old password)
          - new password (change + policy)

      * [MUST] BACKEND performs the actual password change

