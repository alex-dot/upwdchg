Universal Password Changer (UPwdChg)
====================================

This document will detail the "protocol" underlying the Universal Password
Changer, such as to hopefully allow users to appraise its security.


Password Reset
--------------

In order to perform a password reset, the following data exchange and processing
will take place:

1. USER -> FRONTEND -> BACKEND: "password-nonce-request" token

   1.a. USER -> FRONTEND

      * [SHOULD] USER authenticates on FRONTEND (using the provided Captcha)

        NOTE: Using the Captcha will prevent the BACKEND from being (too) easily
        flooded (DoS-ed) with automated password nonce requests.
        TCP/firewall level anti-DoS protection (connection throttling) SHOULD also
        be used to mitigate this threat.

      * [MUST] USER provides the FRONTEND with his username

   1.b. FRONTEND

      * [MUST] FRONTEND creates a "password-nonce-request" token:

        PSEUDO CODE:
          timestamp = NOW()
          sesson-id = RANDOM()
          data = { timestamp, session-id, username }
          digest = HASH( data )
          key = RANDOM()
          iv = RANDOM()
          key-encrypted = PUBLIC_ENCRYPT( key, backend-public-key )
          data-encrypted = SYMMETRIC_ENCRYPT( { data, digest }, key, iv )
          data-signature = PRIVATE_SIGN( data-encrypted, frontend-private-key )
          token = { key-encrypted, iv, data-encrypted, data-signature }
          token-file = TIMESTAMP()+RANDOM()
          WRITE( token-file, token )

   1.c. FRONTEND -> BACKEND

      * [MUST] The token is transferred from the FRONTEND to the BACKEND

        NOTE: The way the transfer takes place is no business of UPwdChg.
        The easiest way is a common - but dedicated - NFS share (with
        appropriate permissions). One can also imagine using RSync,
        SCP, E-mail, Dropbox (...), etc.

        NOTE: Thanks to (BACKEND's) public key (assymetric) encryption,
        the token is readable by NO ONE save the BACKEND. Also, thanks to
        the (FRONTEND's) private key signature, the token can be trusted
        to be originated from the FRONTEND. The token can thus be
        transferred through an insecure medium.

   1.d. BACKEND

      * [MUST] BACKEND decrypts the token:

        PSEUDO CODE:
          token = READ( token-file )
          token => { key-encrypted, iv, data-encrypted, data-signature }
          PUBLIC_VERIFY( data-encrypted, data-signature, frontend-public-key )
          key = PRIVATE_DECRYPT( key-encrypted, backend-private-key )
          { data, digest } = SYMMETRIC_DECRYPT( data-encrypted, key, iv )
          HASH( data ) == digest ?
          data => { timestamp, session-id, username }

      * [MUST] BACKEND validates all received data:
          - timestamp (within time-to-live limit ?)

      * [MUST] BACKEND creates a "password-nonce" token:

        PSEUDO CODE:
          timestamp = NOW()
          expiration = timestamp + password-nonce-ttl
          password-nonce-id = RANDOM()
          password-nonce-secret = RANDOM()
          password-nonce-secret-hashed = HASH( password-nonce-secret )
          data = { timestamp, session-id, username,
                   expiration, password-nonce-id, password-nonce-secret-hashed }
          digest = HASH( data )
          key = RANDOM()
          iv = RANDOM()
          key-encrypted = PUBLIC_ENCRYPT( key, frontend-public-key )
          data-encrypted = SYMMETRIC_ENCRYPT( { data, digest }, key, iv )
          data-signature = PRIVATE_SIGN( data-encrypted, backend-private-key )
          token = { key-encrypted, iv, data-encrypted, data-signature }
          token-file = RANDOM()
          WRITE( token-file, token )

2.A. BACKEND -> FRONTEND: "password-nonce" token

   2.A.i. BACKEND -> FRONTEND

      * [MUST] The token is transferred from the BACKEND to the FRONTEND

        NOTE: The way the transfer takes place is no business of UPwdChg.
        The easiest way is a common - but dedicated - NFS share (with
        appropriate permissions). One can also imagine using RSync,
        SCP, E-mail, Dropbox (...), etc.

        NOTE: Thanks to (FRONTEND's) public key (assymetric) encryption,
        the token is readable by NO ONE save the FRONTEND. Also, thanks to
        the (BACKEND's) private key signature, the token can be trusted
        to be originated from the BACKEND. The token can thus be
        transferred through an insecure medium.

        NOTE: Thanks to password nonce secret being cryptographically hashed,
        it can NOT be read by ANYONE. The password nonce is thus safe, even
        if the FRONTEND is compromised.

2.B. BACKEND -> USER: "password-nonce" (PIN code) message

   2.B.i. BACKEND -> USER

      * [MUST] The password nonce (ID and secret <-> PIN code) is transferred
        from the BACKEND to the USER

        NOTE: The password nonce MUST NOT be transferred via the FRONTEND.
        Ideally, it should be sent to a user's alternate e-mail address
        (e.g. private address) or mobile phone (via SMS).

        NOTE: The password nonce sent to the user SHOULD NOT include any
        reference (e.g. URLs) to the corresponding password change operation
        on the FRONTEND, even if the FRONTEND session ID and a short expiration
        time shall help mitigate the risk of password nonces being sent to
        untrusted destinations.

3. USER -> FRONTEND -> BACKEND: "password-reset" token

   3.a. USER -> FRONTEND

      * [MUST] USER provides the FRONTEND with his username and password nonce
        (PIN code)

   3.b. FRONTEND

      * [MUST] FRONTEND finds and decrypts the "password-nonce" token correspon-
        ding to the supplied password nonce:

        PSEUDO CODE:
          token = READ( token-file )
          token => { key-encrypted, iv, data-encrypted, data-signature }
          PUBLIC_VERIFY( data-encrypted, data-signature, backend-public-key )
          key = PRIVATE_DECRYPT( key-encrypted, frontend-private-key )
          { data, digest } = SYMMETRIC_DECRYPT( data-encrypted, key, iv )
          HASH( data ) == digest ?
          data => { timestamp, session-id, username,
                    expiration, password-nonce-id, password-nonce-secret-hashed }

      * [SHOULD] FRONTEND validates the password nonce:
          - password nonce (session-id, expiration and secret)

        NOTE: This is donely purely to avoid the BACKEND being easily flooded
        (DoS-ed) with invalid password change requests.

        NOTE: Nothing that comes from the FRONTEND must be trusted!
        Everything must be validated by the BACKEND (again)!

      * [SHOULD] FRONTEND validates the new password according to the password
        policy

        NOTE: This is done purely out of user-friendliness and to avoid sending
        invalid password change requests to the BACKEND.

        NOTE: Nothing that comes from the FRONTEND must be trusted!
        Everything must be validated by the BACKEND (again)!

      * [MUST] FRONTEND creates a "password-reset" token:

        PSEUDO CODE:
          timestamp = NOW()
          data = { timestamp, session-id, username,
                   password-nonce, password-new }
          digest = HASH( data )
          key = RANDOM()
          iv = RANDOM()
          key-encrypted = PUBLIC_ENCRYPT( key, backend-public-key )
          data-encrypted = SYMMETRIC_ENCRYPT( { data, digest }, key, iv )
          data-signature = PRIVATE_SIGN( data-encrypted, frontend-private-key )
          token = { key-encrypted, iv, data-encrypted, data-signature }
          token-file = TIMESTAMP()+RANDOM()
          WRITE( token-file, token )

   3.c. FRONTEND -> BACKEND

      * [MUST] The token is transferred from the FRONTEND to the BACKEND

        NOTE: The way the transfer takes place is no business of UPwdChg.
        The easiest way is a common - but dedicated - NFS share (with
        appropriate permissions). One can also imagine using RSync,
        SCP, E-mail, Dropbox (...), etc.

        NOTE: Thanks to (BACKEND's) public key (assymetric) encryption,
        the token is readable by NO ONE save the BACKEND. Also, thanks to
        the (FRONTEND's) private key signature, the token can be trusted
        to be originated from the FRONTEND. The token can thus be
        transferred through an insecure medium.

   3.d. BACKEND

      * [MUST] BACKEND decrypts the token:

        PSEUDO CODE:
          token = READ( token-file )
          token => { key-encrypted, iv, data-encrypted, data-signature }
          PUBLIC_VERIFY( data-encrypted, data-signature, frontend-public-key )
          key = PRIVATE_DECRYPT( key-encrypted, backend-private-key )
          { data, digest } = SYMMETRIC_DECRYPT( data-encrypted, key, iv )
          HASH( data ) == digest ?
          data => { timestamp, session-id, username,
                    password-nonce, password-new }

      * [MUST] BACKEND finds and decrypts the "password-nonce" token correspon-
        ding to the supplied password nonce:

        PSEUDO CODE:
          token = READ( token-file )
          token => { key-encrypted, iv, data-encrypted, data-signature }
          PUBLIC_VERIFY( data-encrypted, data-signature, backend-public-key )
          key = PUBLIC_DECRYPT( key-encrypted, frontend-private-key )
          { data, digest } = SYMMETRIC_DECRYPT( data-encrypted, key, iv )
          HASH( data ) == digest ?
          data => { timestamp, session-id, username,
                    expiration, password-nonce-id, password-nonce-secret-hashed }

        NOTE: The BACKEND also possess the FRONTEND's private key, for the
        sake of decrypting the "password-nonce" token originally created by
        the former and sent to the latter. This may sound unusual but remember
        the BACKEND can ultimately be trusted.

      * [MUST] BACKEND validates all received data:
          - timestamp (within time-to-live limit ?)
          - password nonce (session-id, expiration and secret)
          - new password (change + policy)

      * [MUST] BACKEND performs the actual password change

