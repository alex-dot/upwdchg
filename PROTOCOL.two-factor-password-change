Universal Password Changer (UPwdChg)
====================================

This document will detail the "protocol" underlying the Universal Password
Changer, such as to hopefully allow users to appraise its security.


Two-Factor Password Change
--------------------------

This is almost identical to a password reset, except that the user old password
will be used *along* the password nonce (PIN code) when eventually creating
a "password-change" token (instead of a "password-reset" token).

Please refer to the PROTOCOL.password-reset file for details.

The last step of the password change:

3. USER -> FRONTEND -> BACKEND: "password-change" token

   3.a. USER -> FRONTEND

      * [MUST] USER provides the FRONTEND with his username, old password and
         password nonce (PIN code)

   3.b. FRONTEND

      * [MUST] FRONTEND finds and decrypts the "password-nonce" token correspon-
        ding to the supplied password nonce:

      * [SHOULD] FRONTEND validates the password nonce (expiration and secret)

      * [SHOULD] FRONTEND validates the new password according to the password
        policy

      * [MUST] FRONTEND creates a "password-change" token:

        PSEUDO CODE:
          timestamp = NOW()
          data = { timestamp, session-id, username,
                   password-nonce, password-old, password-new }
          digest = HASH( data )
          key = RANDOM()
          iv = RANDOM()
          key-encrypted = PUBLIC_ENCRYPT( key, backend-public-key )
          data-encrypted = SYMMETRIC_ENCRYPT( { data, digest }, key, iv )
          data-signature = PRIVATE_SIGN( data-encrypted, frontend-private-key )
          token = { key-encrypted, iv, data-encrypted, data-signature }
          token-file = TIMESTAMP()+RANDOM()
          WRITE( token-file, token )

   3.c. FRONTEND -> BACKEND

      * [MUST] The token is transferred from the FRONTEND to the BACKEND

   3.d. BACKEND

      * [MUST] BACKEND decrypts the token:

        PSEUDO CODE:
          token = READ( token-file )
          token => { key-encrypted, iv, data-encrypted, data-signature }
          PUBLIC_VERIFY( data-encrypted, data-signature, frontend-public-key )
          key = PRIVATE_DECRYPT( key-encrypted, backend-private-key )
          { data, digest } = SYMMETRIC_DECRYPT( data-encrypted, key, iv )
          HASH( data ) == digest ?
          data => { timestamp, session-id, username,
                    password-nonce, password-old, password-new }

      * [MUST] BACKEND finds and decrypts the "password-nonce" token correspon-
        ding to the supplied password nonce:

      * [MUST] BACKEND validates all received data:
          - timestamp (within time-to-live limit ?)
          - password nonce (session-id, expiration and secret)
          - old credentials (username + old password)
          - new password (change + policy)

      * [MUST] BACKEND performs the actual password change

