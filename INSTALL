Universal Password Changer (UPwdChg)
====================================

NOTE: For the sake of clarity, we will assume a Linux (Debian) environment.


BUILD
-----

NOTE: By "build", we mean create the necessary tarballs/package required for
      installation (according to the INSTALL section below) or distribution.

1. [MUST] Obtain the source tarball:

   BASH: tar -xjf upwdchg-source-@version@.tar.bz2
   BASH: cd upwdchg-source-@version@

2. [MAY] (Re-)build the source tarball:

   BASH: ./debian/rules build-source-tarball
   BASH: ls -al ../upwdchg-source-@version@.tar.bz2

3. [MAY] Build the installation (release) tarball:

   BASH: ./debian/rules build-install-tarball
   BASH: ls -al ../upwdchg-@version@.tar.bz2

4. [MAY] Build the debian packages:

   BASH: dpkg-buildpackage -us -uc -b
   BASH: ls -al ../upwdchg-*_@version@_all.deb

5. [MAY] Build the debian source package:

   BASH: dpkg-buildpackage -I'.git*' -I'*.pyc' -us -uc -S -d
   BASH: ls -al ../upwdchg_@version@.dsc ../upwdchg_@version@.tar.gz

OR

2-5. [SHOULD] Do it all with a single command

   BASH: ./debian/rules release


INSTALL
-------

WARNING:
   The Universal Password Changer (UPwdChg) is actively maintained on Linux.
   It has not been tested on other operating systems.

NOTE:
   We assume a previously working Python and Apache/PHP/PEAR setup.

1. [MUST] Install:

   a. using the release tarball:

      BASH: INSTALL_DIR='<installation-directory>'
      BASH: cd "${INSTALL_DIR}"
      BASH: tar -xjf upwdchg-@version@.tar.bz2

   OR

   b. using the debian package:

      BASH: dpkg -i upwdchg-*_@version@_all.deb

   OR

   c. using the source tarball (and Python / PHP PEAR installers):

      BASH: tar -xjf upwdchg-source-@version@.tar.bz2
      BASH: cd upwdchg-source-@version@
      BASH: python setup.py
      BASH: pear install frontent/packages.xml


USAGE - FRONTEND
----------------

SYSNOPSIS:
   The Universal Password Changer (UPwdChg) Frontend allows users to request
   their password to be changed via a simple yet fully-customizable (PHP) web
   interface.
   Password change requests are encrypted as password change tokens, that shall
   be further processed - by the backend (see below) - to perform the actual
   password change.

NOTE:
   For the sake of consistency, we will assume:
    - an installation consistent with PHP PEAR standards
      (in '/usr/share/php/...')
    - the Universal Password Changer located at 'https://example.org/upwdchg/'
      (corresponding to '/etc/upwdchg/frontend/htdocs/')

1. [MUST] Create the password change tokens and configuration directory:

   BASH: mkdir -p /var/lib/upwdchg/{backend,frontend}/tokens.d
   BASH: mkdir -p /etc/upwdchg/{backend,frontend}

   (and adjust the '*_tokens_directory' configuration correspondingly; see 4.)

2. [MUST] Create the private/public keys pair:

   BASH: mkdir -p /etc/upwdchg/frontend
   BASH: touch /etc/upwdchg/frontend/private.pem \
         && chmod go= /etc/upwdchg/frontend/private.pem \
         && openssl genrsa -out /etc/upwdchg/frontend/private.pem 4096
   BASH: openssl rsa -in /etc/upwdchg/frontend/private.pem \
                     -out /etc/upwdchg/frontend/public.pem \
                     -outform PEM -pubout

   (and copy the backend public key - ONLY! - to /etc/upwdchg/backend; see BACKEND below)

3. [MAY] Create and customize the (localized) resources directory:

   BASH: cp -r /usr/share/php/UPwdChg/resources \
               /etc/upwdchg/frontend/.

   (and adjust the 'resources_directory' configuration correspondingly; see 4.)

4. [MUST] Create and customize the configuration file:

   BASH: mkdir -p /etc/upwdchg/frontend
   BASH: cp /usr/share/php/doc/UPwdChg/examples/config.php \
            /etc/upwdchg/frontend/.

   (and set Apache 'PHP_UPWDCHG_CONFIG' environment correspondingly; see 6.)

5. [MUST] Create and customize the root HTML document file (index.php):

   BASH: mkdir -p /etc/upwdchg/frontend/htdocs
   BASH: cp /usr/share/php/doc/UPwdChg/examples/index.php \
            /etc/upwdchg/frontend/htdocs/.

   (feel free to modify the HTML content to match your visual needs)

6. [MUST] Configure Apache:

   BASH: mkdir -p /etc/upwdchg/frontend
   BASH: cp /usr/share/php/doc/UPwdChg/examples/apache.conf \
            /etc/upwdchg/frontend/.
   BASH: ln -s /etc/upwdchg/frontend/apache.conf \
               /etc/apache2/conf-available/upwdchg-frontend.conf


USAGE - BACKEND
---------------

SYSNOPSIS:
   The Universal Password Changer (UPwdChg) Backend provides system admins
   with the tools to process password change tokens.
   Password change tokens are then passed - in their encrypted form - to
   various user-customizable processing plugins, which may do whatever is
   deemed necessary to perform the actual password change, such as password
   policy verification, credentials check and password change operations on
   various backends (such as LDAP, MIT Kerberos 5, Microsoft Active Directory,
   etc.).
   This processing can be fully automated thanks to the Universal Password
   Changer (UPwdChg) Daemon (see below).

1. [MUST] Create the password change tokens and configuration directory:

   BASH: mkdir -p /var/lib/upwdchg/{backend,frontend}/tokens.d
   BASH: mkdir -p /etc/upwdchg/{backend,frontend}

   (and adjust the 'tokens_directory' configuration correspondingly; see 4.)

2. [MUST] Create the private/public keys pair:

   BASH: touch /etc/upwdchg/backend/private.pem \
         && chmod go= /etc/upwdchg/backend/private.pem \
         && openssl genrsa -out /etc/upwdchg/backend/private.pem 4096
   BASH: openssl rsa -in /etc/upwdchg/backend/private.pem \
                     -out /etc/upwdchg/backend/public.pem \
                     -outform PEM -pubout

   (and copy BOTH the frontend private+public keys to /etc/upwdchg/frontend; see FRONTEND above)
   
3. [MUST] Create and customize password change token processing plugins:

   BASH: mkdir -p /etc/upwdchg/backend/plugins/password-change.d
   BASH: cp /usr/share/upwdchg/backend/plugins/* \
            /etc/upwdchg/backend/plugins/password-change.d

   (edit/configure each plugin to match your environment/requirements)
   (and adjust the 'plugins_directory' configuration correspondingly; see 4.)

4. [MUST] Create and customize the configuration file:

   BASH: cp /usr/share/upwdchg/backend/upwdchg.conf.sample \
            /etc/upwdchg/backend/upwdchg.conf

5. [MAY] Create password change tokens manually:

   BASH: upwdchg-token --help

6. [MAY] Process password change tokens manually:

   BASH: upwdchg-process --help


USAGE - DAEMON
--------------

SYSNOPSIS:
   The Universal Password Changer (UPwdChg) Daemon automates the processing
   of password change tokens by watching a specified (tokens-dedicated) direc-
   tory for changes, ideally matching the password change tokens directory of
   the Universal Password Changer (UPwdChg) Frontend.
   For optimal security, the backend/daemon should run on a different host than
   the frontend. The password change tokens directory shall thus be shared
   between the two hosts using shared mountpoints (NFS, CIFS, SSHFS, ...) or
   regular synchronization (RSync, ...).

1. [MUST] Launch the processing daemon:

   BASH: upwdchg-daemon --help
