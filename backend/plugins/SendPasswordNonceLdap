#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import \
     UPWDCHG_DEFAULT_DIR_PUBLIC, \
     TokenPlugin
from email.mime.text import MIMEText
import ldap
import os
from subprocess import Popen, PIPE
import sys

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO
UPWDCHG_PLUGIN_DRYRUN=True

# ... password nonce
UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR=UPWDCHG_DEFAULT_DIR_PUBLIC
UPWDCHG_PLUGIN_PASSWORD_NONCE_LENGTH=[6,6]
UPWDCHG_PLUGIN_PASSWORD_NONCE_TTL=900

# ... LDAP directory
UPWDCHG_PLUGIN_LDAP_URI='ldap://ldap.example.org:389'
UPWDCHG_PLUGIN_LDAP_ADMIN_DN='cn=admin,dc=example,dc=org'  # set to None to bind anonymously
UPWDCHG_PLUGIN_LDAP_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_LDAP_USER_DN='uid=%{USERNAME},ou=users,dc=example,dc=org'  # set to None to perform DN search
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN='ou=users,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER='(&(objectClass=inetOrgPerson)(uid=%{USERNAME}))'
UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE='mail'
UPWDCHG_PLUGIN_EMAIL_SENDER='UPwdChg <upwdchg@example.org>'
UPWDCHG_PLUGIN_EMAIL_RECIPIENT='%{LDAP_MAIL}'  # '%{LDAP_MAIL}' shall be replaced with value retrieved from LDAP
UPWDCHG_PLUGIN_EMAIL_SUBJECT='PIN code'
UPWDCHG_PLUGIN_EMAIL_BODY='Your PIN code is: %{PASSWORD_NONCE}'
UPWDCHG_PLUGIN_EMAIL_SENDMAIL='/usr/sbin/sendmail'
UPWDCHG_PLUGIN_EMAIL_ENCODING='utf-8'

# Plugin
class SendPasswordNonceLdap(TokenPlugin):

    def __init__(self):
        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
        TokenPlugin.__init__(self, 'SendPasswordNonceLdap', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)

    def process(self):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_PASSWORD_NONCE_LENGTH, \
            UPWDCHG_PLUGIN_PASSWORD_NONCE_TTL, \
            UPWDCHG_PLUGIN_LDAP_URI, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_DN, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_PWD, \
            UPWDCHG_PLUGIN_LDAP_USER_DN, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER, \
            UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE, \
            UPWDCHG_PLUGIN_EMAIL_SENDER, \
            UPWDCHG_PLUGIN_EMAIL_RECIPIENT, \
            UPWDCHG_PLUGIN_EMAIL_SUBJECT, \
            UPWDCHG_PLUGIN_EMAIL_BODY, \
            UPWDCHG_PLUGIN_EMAIL_SENDMAIL, \
            UPWDCHG_PLUGIN_EMAIL_ENCODING

        # Check parameters
        if not UPWDCHG_PLUGIN_LDAP_URI:
            self._DEBUG('Missing server address (URI)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Get token (data)
        oToken = self._getToken()
        uUsername = oToken['username']
        sUsername = uUsername.encode('utf-8')
        if 'session-id' in oToken.keys():
            uSessionId = oToken['session-id']
        else:
            uSessionId = None

        # Retrieve destination form LDAP

        # ... initialize connection
        try:
            oLdap = ldap.initialize(UPWDCHG_PLUGIN_LDAP_URI)
            oLdap.protocol_version = ldap.VERSION3
            self._DEBUG('Successfully initialized connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to initialize connection; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind credentials
        if UPWDCHG_PLUGIN_LDAP_ADMIN_DN:
            sBindDn = UPWDCHG_PLUGIN_LDAP_ADMIN_DN
            if not UPWDCHG_PLUGIN_LDAP_ADMIN_PWD:
                sBindPwd=''  # Really!?!
            elif UPWDCHG_PLUGIN_LDAP_ADMIN_PWD.startswith('file://'):
                sFile = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD[7:]
                try:
                    oFile = open(sFile, 'r')
                    sBindPwd = oFile.readline()
                    oFile.close()
                except Exception as e:
                    self._DEBUG('Failed to retrieve bind password from file; %s' % str(e))
                    self._EXIT_ERROR('Internal error; please contact your system administrator')
            else:
                sBindPwd = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD
        else:
            sBindDn = ''
            sBindPwd = ''
        self._DEBUG('Binding to server as: %s' % sBindDn, TokenPlugin.DEBUG_TRACE)

        # ... bind to server
        try:
            oLdap.bind_s(sBindDn, sBindPwd, ldap.AUTH_SIMPLE)
            self._DEBUG('Successfully bound to server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to bind to server; %s' % str(e))
            self._EXIT_ERROR('Invalid credentials')

        # ... user DN
        try:
            if not UPWDCHG_PLUGIN_LDAP_USER_DN:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER.replace('%{USERNAME}', sUsername),
                    attrlist=[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE],
                    sizelimit=2
                    )
            else:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_USER_DN.replace('%{USERNAME}', sUsername),
                    ldap.SCOPE_BASE,
                    '(objectClass=*)',
                    attrlist=[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE],
                    sizelimit=2
                    )
            if not lLdapResults:
                raise Exception('user not found: %s' % sUsername)
            elif len(lLdapResults) > 1:
                raise Exception('too many match: %s' % sUsername)
            (sUserDn, dAttrs) = lLdapResults[0]
            self._DEBUG('Successfully retrieved user: %s' % sUserDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve user; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... unbind from server
        try:
            oLdap.unbind_s()
            self._DEBUG('Successfully unbound from server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to unbind from server; %s' % str(e))

        # ... check attributes
        if UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE not in dAttrs.keys() \
            or len(dAttrs[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE]) <= 0:
            self._DEBUG('Failed to retrieve attribute; %s' % UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE)
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        else:
            self._DEBUG('Successfully retrieved attribute: %s=%s' % (UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE, dAttrs[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE][0]), TokenPlugin.DEBUG_TRACE)

        # Create "password-nonce" token
        try:
            oToken_nonce = self._getTokenWriter()
            sPasswordNonce = oToken_nonce.makePasswordNonce(UPWDCHG_PLUGIN_PASSWORD_NONCE_LENGTH, _sFileRandom=self._sFileRandom)
            (uPasswordNonce_id, uPasswordNonce_secret) = oToken_nonce.splitPasswordNonce(sPasswordNonce)
            oToken_nonce.setData_PasswordNonce(uUsername, sPasswordNonce, UPWDCHG_PLUGIN_PASSWORD_NONCE_TTL, uSessionId)
            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+uPasswordNonce_id.encode(sys.getfilesystemencoding())+'.nonce'
            if not UPWDCHG_PLUGIN_DRYRUN:
                if oToken_nonce.writeToken(sFileToken_nonce):
                    self._DEBUG('Failed to write "password-nonce" token; %s' % sFileToken_nonce)
                    self._EXIT_ERROR('Internal error; please contact your system administrator')
                self._DEBUG('Successfully created "password-nonce" token for user: %s -> %s' % (uUsername, sFileToken_nonce), TokenPlugin.DEBUG_INFO)
            else:
                self._DEBUG('DRY-RUN! NOT creating "password-nonce" token for user: %s -> %s' % (uUsername, sFileToken_nonce), TokenPlugin.DEBUG_WARNING)
        except Exception as e:
            self._DEBUG('Failed to create "password-nonce" token; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Send password nonce to LDAP-retrieved recipient
        try:
            sEmailUser = dAttrs[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE][0]
            sEmailRecipient = UPWDCHG_PLUGIN_EMAIL_RECIPIENT.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING).replace('%{LDAP_MAIL}', sEmailUser)
            sEmailBody = UPWDCHG_PLUGIN_EMAIL_BODY.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING).replace('%{PASSWORD_NONCE}', sPasswordNonce)
            oMIMEText = MIMEText(sEmailBody, 'plain', UPWDCHG_PLUGIN_EMAIL_ENCODING)
            oMIMEText['From'] = UPWDCHG_PLUGIN_EMAIL_SENDER.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING)
            oMIMEText['Subject'] = UPWDCHG_PLUGIN_EMAIL_SUBJECT.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING)
            oMIMEText['To'] = sEmailRecipient
            if not UPWDCHG_PLUGIN_DRYRUN:
                oPopen = Popen([UPWDCHG_PLUGIN_EMAIL_SENDMAIL, '-t'], stdin=PIPE)
                oPopen.communicate(oMIMEText.as_string())
                self._DEBUG('Successfully sent password nonce to user: %s' % sEmailRecipient, TokenPlugin.DEBUG_INFO)
            else:
                self._DEBUG('DRY-RUN! NOT sending password nonce to user: %s' % sEmailRecipient, TokenPlugin.DEBUG_WARNING)
        except Exception as e:
            self._DEBUG('Failed to send password nonce; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        self._EXIT_OK('Password nonce (PIN code) succesfully sent (to %s)' % sEmailUser)

# Process
SendPasswordNonceLdap().process()
