#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import TokenPlugin
import MySQLdb

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO
UPWDCHG_PLUGIN_DRYRUN=True

# ... MySQL database
#     REQ: "GRANT UPDATE ON mysql.* TO 'root'@'upwdchg-backend.example.org' IDENTIFIED BY PASSWORD '...'"
UPWDCHG_PLUGIN_MYSQL_CONNECT_HOST='mysql.example.org'
UPWDCHG_PLUGIN_MYSQL_CONNECT_USER='root'  # set to None to connect as user
UPWDCHG_PLUGIN_MYSQL_CONNECT_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE=None  # if not None, all other connection parameters are ignored
UPWDCHG_PLUGIN_MYSQL_PASSWORD_USER='%{USERNAME}'  # '%{USERNAME}' shall be replaced by actual username
UPWDCHG_PLUGIN_MYSQL_PASSWORD_HOST='%'

# Plugin
class ChangePasswordMysql(TokenPlugin):

    def __init__(self):
        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
        TokenPlugin.__init__(self, 'ChangePasswordMysql', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)

    def process(self):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_MYSQL_CONNECT_HOST, \
            UPWDCHG_PLUGIN_MYSQL_CONNECT_USER, \
            UPWDCHG_PLUGIN_MYSQL_CONNECT_PWD, \
            UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE, \
            UPWDCHG_PLUGIN_MYSQL_PASSWORD_USER, \
            UPWDCHG_PLUGIN_MYSQL_PASSWORD_HOST

        # Check parameters
        if not UPWDCHG_PLUGIN_MYSQL_CONNECT_HOST and not UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE:
            self._DEBUG('Incomplete MySQL "CONNECT" configuration')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if not UPWDCHG_PLUGIN_MYSQL_PASSWORD_USER:
            self._DEBUG('Missing MySQL "PASSWORD_USER" configuration')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if not UPWDCHG_PLUGIN_MYSQL_PASSWORD_HOST:
            self._DEBUG('Missing MySQL "PASSWORD_HOST" configuration')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Get token (data)
        oToken = self._getToken()
        sUsername = oToken['username'].encode('utf-8')
        sPasswordNew = oToken['password-new'].encode('utf-8')
        if 'password-old' in oToken.keys():
            sPasswordOld = oToken['password-old'].encode('utf-8')
        else:
            sPasswordOld = None

        # Change MySQL password

        # ... connection credentials
        try:
            if UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE is not None:
                sConnectHost = None
                sConnectUser = None
                sConnectPwd = None
                self._DEBUG('Connecting to server using configuration file: %s' % UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE, TokenPlugin.DEBUG_TRACE)
            else:
                sConnectHost = UPWDCHG_PLUGIN_MYSQL_CONNECT_HOST
                if UPWDCHG_PLUGIN_MYSQL_CONNECT_USER is not None:
                    sConnectUser = UPWDCHG_PLUGIN_MYSQL_CONNECT_USER
                    if not UPWDCHG_PLUGIN_MYSQL_CONNECT_PWD:
                        sConnectPwd=''  # Really!?!
                    elif UPWDCHG_PLUGIN_MYSQL_CONNECT_PWD.startswith('file://'):
                        sFile = UPWDCHG_PLUGIN_MYSQL_CONNECT_PWD[7:]
                        try:
                            oFile = open(sFile, 'r')
                            sConnectPwd = oFile.readline()
                            oFile.close()
                        except Exception as e:
                            self._DEBUG('Failed to retrieve connection password from file; %s' % str(e))
                            self._EXIT_ERROR('Internal error; please contact your system administrator')
                    else:
                        sConnectPwd = UPWDCHG_PLUGIN_MYSQL_CONNECT_PWD
                else:
                    if sPasswordOld is None:
                        self._DEBUG('Token has no "password-old" attribute')
                        self._EXIT_ERROR('Internal error; please contact your system administrator')
                    sConnectUser = sUsername
                    sConnectPwd = sPasswordOld
                self._DEBUG('Connecting to server as: %s' % sConnectUser, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve connection credentials; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... open connection
        try:
            if UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE is not None:
                oMySQL = MySQLdb.connect(read_default_file=UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE)
            else:
                oMySQL = MySQLdb.connect(host=sConnectHost, user=sConnectUser, passwd=sConnectPwd)
            oCursor = oMySQL.cursor()
            self._DEBUG('Successfully opened connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to open connection; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... password change
        try:
            if UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE is not None
                or UPWDCHG_PLUGIN_MYSQL_CONNECT_USER is not None:
                sPasswordUser = UPWDCHG_PLUGIN_MYSQL_PASSWORD_USER.replace('%{USERNAME}', sUsername)
            else:
                sPasswordUser = sUsername
            sPasswordHost = UPWDCHG_PLUGIN_MYSQL_PASSWORD_HOST
            if not UPWDCHG_PLUGIN_DRYRUN:
                if UPWDCHG_PLUGIN_MYSQL_CONNECT_CONFFILE is not None
                    or UPWDCHG_PLUGIN_MYSQL_CONNECT_USER is not None:
                    oCursor.execute('SET PASSWORD FOR %s@%s = PASSWORD(%s)', (sPasswordUser, sPasswordHost, sPasswordNew))
                else:
                    oCursor.execute('SET PASSWORD = PASSWORD(%s)', (sPasswordNew,))
                self._DEBUG("Successfully changed password for user: '%s'@'%s'" % (sPasswordUser, sPasswordHost), TokenPlugin.DEBUG_INFO)
            else:
                self._DEBUG("DRY-RUN! NOT changing password for user: '%s'@'%s'" % (sPasswordUser, sPasswordHost), TokenPlugin.DEBUG_WARNING)
        except Exception as e:
            self._DEBUG('Failed to change password; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... close connection
        try:
            oCursor.close()
            self._DEBUG('Successfully closed connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to close connection; %s' % str(e))

        # Done
        self._EXIT_OK('Password successfully changed')

# Process
ChangePasswordMysql().process()
