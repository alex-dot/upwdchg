#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014-2018 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
# SPDX-License-Identifier: GPL-3.0
# License-Filename: LICENSE/GPL-3.0.txt
#

# Modules
from UPwdChg import TokenPlugin
import string

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO

# ... length; int: 0/None=ignore
UPWDCHG_PLUGIN_USERNAME_LENGTH_MINIMUM=4
UPWDCHG_PLUGIN_USERNAME_LENGTH_MAXIMUM=64
# ... forbidden/required character types; int: -1=forbidden, 1=required, 0/None=ignore
UPWDCHG_PLUGIN_USERNAME_TYPE_LOWER=1
UPWDCHG_PLUGIN_USERNAME_TYPE_UPPER=-1
UPWDCHG_PLUGIN_USERNAME_TYPE_DIGIT=-1
UPWDCHG_PLUGIN_USERNAME_TYPE_PUNCT=-1
UPWDCHG_PLUGIN_USERNAME_TYPE_OTHER=-1

# Plugin
class CheckUsernamePolicy(TokenPlugin):

    def __init__(self):
        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
        TokenPlugin.__init__(self, 'CheckUsernamePolicy', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)

    def process(self):
        global \
            UPWDCHG_PLUGIN_USERNAME_LENGTH_MINIMUM, \
            UPWDCHG_PLUGIN_USERNAME_LENGTH_MAXIMUM, \
            UPWDCHG_PLUGIN_USERNAME_TYPE_LOWER, \
            UPWDCHG_PLUGIN_USERNAME_TYPE_UPPER, \
            UPWDCHG_PLUGIN_USERNAME_TYPE_DIGIT, \
            UPWDCHG_PLUGIN_USERNAME_TYPE_PUNCT, \
            UPWDCHG_PLUGIN_USERNAME_TYPE_OTHER

        # Get token (data)
        oToken = self._getToken()
        uUsername = oToken['username']
        sUsername = uUsername.encode('utf-8')

        # Process token data
        bError = False
        lsOutputs = list()

        # ... check username length
        if UPWDCHG_PLUGIN_USERNAME_LENGTH_MINIMUM and len(uUsername) < UPWDCHG_PLUGIN_USERNAME_LENGTH_MINIMUM:
            lsOutputs.append('Username MUST contain at least %d characters' % UPWDCHG_PLUGIN_USERNAME_LENGTH_MINIMUM)
            bError = True
        if UPWDCHG_PLUGIN_USERNAME_LENGTH_MAXIMUM and len(uUsername) > UPWDCHG_PLUGIN_USERNAME_LENGTH_MAXIMUM:
            lsOutputs.append('Username may NOT contain more than %d characters' % UPWDCHG_PLUGIN_USERNAME_LENGTH_MAXIMUM)
            bError = True

        # ... check character classes
        bLower = False
        bUpper = False
        bDigit = False
        bPunct = False
        bOther = False
        iType = 0
        for sCharacter in sUsername:
            if sCharacter in string.lowercase:
                if not bLower:
                    bLower = True
                    iType += 1
            elif sCharacter in string.uppercase:
                if not bUpper:
                    bUpper = True
                    iType += 1
            elif sCharacter in string.digits:
                if not bDigit:
                    bDigit = True
                    iType += 1
            elif sCharacter in string.punctuation:
                if not bPunct:
                    bPunct = True
                    iType += 1
            else:
                if not bOther:
                    bOther = True
                    iType += 1
        if UPWDCHG_PLUGIN_USERNAME_TYPE_LOWER:
            if bLower and UPWDCHG_PLUGIN_USERNAME_TYPE_LOWER<0:
                lsOutputs.append('Username may NOT contain any lowercase character')
                bError = True
            elif not bLower and UPWDCHG_PLUGIN_USERNAME_TYPE_LOWER>0:
                lsOutputs.append('Username MUST contain at least one lowercase character')
                bError = True
        if UPWDCHG_PLUGIN_USERNAME_TYPE_UPPER:
            if bUpper and UPWDCHG_PLUGIN_USERNAME_TYPE_UPPER<0:
                lsOutputs.append('Username may NOT contain any uppercase character')
                bError = True
            elif not bUpper and UPWDCHG_PLUGIN_USERNAME_TYPE_UPPER>0:
                lsOutputs.append('Username MUST contain at least one uppercase character')
                bError = True
        if UPWDCHG_PLUGIN_USERNAME_TYPE_DIGIT:
            if bDigit and UPWDCHG_PLUGIN_USERNAME_TYPE_DIGIT<0:
                lsOutputs.append('Username may NOT contain any digit')
                bError = True
            elif not bDigit and UPWDCHG_PLUGIN_USERNAME_TYPE_DIGIT>0:
                lsOutputs.append('Username MUST contain at least one digit')
                bError = True
        if UPWDCHG_PLUGIN_USERNAME_TYPE_PUNCT:
            if bPunct and UPWDCHG_PLUGIN_USERNAME_TYPE_PUNCT<0:
                lsOutputs.append('Username may NOT contain any punctuation mark')
                bError = True
            elif not bPunct and UPWDCHG_PLUGIN_USERNAME_TYPE_PUNCT>0:
                lsOutputs.append('Username MUST contain at least one punctuation mark')
                bError = True
        if UPWDCHG_PLUGIN_USERNAME_TYPE_OTHER:
            if bOther and UPWDCHG_PLUGIN_USERNAME_TYPE_OTHER<0:
                lsOutputs.append('Username may NOT contain any special character')
                bError = True
            elif not bOther and UPWDCHG_PLUGIN_USERNAME_TYPE_OTHER>0:
                lsOutputs.append('Username MUST contain at least one special character')
                bError = True

        # Done
        if bError:
            self._EXIT_ERROR(lsOutputs)
        self._DEBUG('Username matches policy', TokenPlugin.DEBUG_NOTICE)
        self._EXIT_OK('Username matches policy requirements')

# Process
CheckUsernamePolicy().process()
