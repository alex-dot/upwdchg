#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import TokenPlugin
import ldap

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_LDAP_URI='ldap://ldap.example.org:389'
UPWDCHG_PLUGIN_LDAP_USER_DN='uid=%{USERNAME},ou=users,dc=example,dc=org'  # '%{USERNAME}'  shall be replaced by actual username

# Plugin
class CheckCredentialsLdap(TokenPlugin):

    def __init__( self ):
        global UPWDCHG_PLUGIN_CRITICAL
        TokenPlugin.__init__( self, 'CheckCredentialsLdap', UPWDCHG_PLUGIN_CRITICAL )

    def process( self ):
        global \
            UPWDCHG_PLUGIN_LDAP_URI, \
            UPWDCHG_PLUGIN_LDAP_USER_DN

        # Get token (data)
        dToken = self._getToken()
        sUsername = dToken['username'].encode( 'utf-8' )
        sPasswordOld = dToken['password-old'].encode( 'utf-8' )

        # Process token data
        # ... LDAP bind credentials
        sBindDn = UPWDCHG_PLUGIN_LDAP_USER_DN.replace( '%{USERNAME}', sUsername )
        sBindPwd = sPasswordOld

        # ... LDAP bind
        try:
            oLdap = ldap.initialize( UPWDCHG_PLUGIN_LDAP_URI )
            oLdap.protocol_version = ldap.VERSION3
            oLdap.bind_s( sBindDn, sBindPwd, ldap.AUTH_SIMPLE )
        except Exception as e:
            self._DEBUG( 'Failed to bind to LDAP server; %s' % str( e ) )
            self._EXIT_ERROR( 'Invalid LDAP credentials' )

        # ... LDAP unbind
        try:
            oLdap.unbind_s()
        except Exception as e:
            self._DEBUG( 'Failed to unbind from LDAP server; %s' % str( e ) )

        # Done
        self._EXIT_OK( 'Valid LDAP credentials' )

# Process
CheckCredentialsLdap().process()

