#!/usr/bin/env python3
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014-2018 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
# SPDX-License-Identifier: GPL-3.0
# License-Filename: LICENSE/GPL-3.0.txt
#

#------------------------------------------------------------------------------
# DEPENDENCIES
#------------------------------------------------------------------------------

# UPwdChg
from UPwdChg import TokenPlugin

# Standard
import subprocess as SP
import sys


#------------------------------------------------------------------------------
# CONFIGURATION
#------------------------------------------------------------------------------

# UPwdChg
UPWDCHG_PLUGIN_NAME='ChangePasswordKrb5'
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO
UPWDCHG_PLUGIN_DRYRUN=True

# Kerberos 5
UPWDCHG_PLUGIN_KRB5_PRINCIPAL='%{USERNAME}@EXAMPLE.ORG'
UPWDCHG_PLUGIN_KRB5_ADMSRV='root@krb5adm.example.org'  # if not None, SSH to specified server to execute 'kadmin.local' actions


#------------------------------------------------------------------------------
# PLUGIN
#------------------------------------------------------------------------------

class ChangePasswordKrb5(TokenPlugin):

    def __init__(self):
        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)


    def process(self):
        # Check configuration
        if not UPWDCHG_PLUGIN_KRB5_PRINCIPAL:
            self._DEBUG('Missing principal')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if UPWDCHG_PLUGIN_KRB5_ADMSRV is not None and not UPWDCHG_PLUGIN_KRB5_ADMSRV:
            self._DEBUG('Empty administration server connection string')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Get token (data)
        oToken = self._getToken()
        sUsername = oToken['username']
        sPasswordNew = oToken['password-new']

        # Change Kerberos password

        # ... principal
        sPrincipal = UPWDCHG_PLUGIN_KRB5_PRINCIPAL.replace('%{USERNAME}', sUsername)

        # ... password change
        try:
            if not UPWDCHG_PLUGIN_DRYRUN:
                lCommand = [ 'kadmin.local', '-q', "'change_password -pw \"%s\" \"%s\"'" % (sPasswordNew.replace('"', '""'), sPrincipal.replace('"', '""')) ]
                if UPWDCHG_PLUGIN_KRB5_ADMSRV is not None:
                    lCommand = [ 'ssh', '-x', UPWDCHG_PLUGIN_KRB5_ADMSRV, '--', ' '.join(lCommand) ]
                oPopen = SP.Popen(lCommand, stdout=SP.PIPE, stderr=SP.PIPE)
                (byStdOut, byStdErr) = oPopen.communicate()
                if oPopen.returncode != 0 or byStdErr:
                    raise Exception(byStdErr.decode(sys.stderr.encoding))
                self._DEBUG('Successfully changed password for principal: %s' % sPrincipal, TokenPlugin.DEBUG_INFO)
            else:
                self._DEBUG('DRY-RUN! NOT changing password for principal: %s' % sPrincipal, TokenPlugin.DEBUG_WARNING)
        except Exception as e:
            self._DEBUG('Failed to change password; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        self._EXIT_OK('Password successfully changed')


# Process
ChangePasswordKrb5().process()
