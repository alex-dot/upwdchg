#!/usr/bin/env python3
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014-2018 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
# SPDX-License-Identifier: GPL-3.0
# License-Filename: LICENSE/GPL-3.0.txt
#

#------------------------------------------------------------------------------
# DEPENDENCIES
#------------------------------------------------------------------------------

# UPwdChg
from UPwdChg import TokenPlugin

# Standard
import os
import sys


#------------------------------------------------------------------------------
# CONFIGURATION
#------------------------------------------------------------------------------

# UPwdChg
UPWDCHG_PLUGIN_NAME='NukePasswordNonce'
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO
UPWDCHG_PLUGIN_DRYRUN=False

# Password nonce
UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR='/var/lib/upwdchg/frontend/tokens.d'


#------------------------------------------------------------------------------
# PLUGIN
#------------------------------------------------------------------------------

class NukePasswordNonce(TokenPlugin):

    def __init__(self):
        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)


    def process(self):
        # Get token (data)
        oToken = self._getToken()
        sUsername = oToken['username']
        if 'password-nonce' not in oToken.getData().keys():
            self._DEBUG('Token contains no password nonce')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        sPasswordNonce = oToken['password-nonce']
        (sPasswordNonce_id, sPasswordNonce_secret) = oToken.splitPasswordNonce(sPasswordNonce)

        # Delete "password-nonce" token
        try:
            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+sPasswordNonce_id+'.nonce'
            if not UPWDCHG_PLUGIN_DRYRUN:
                os.remove(sFileToken_nonce)
                self._DEBUG('Successfully deleted "password-nonce" token for user: %s x> %s' % (sUsername, sFileToken_nonce), TokenPlugin.DEBUG_INFO)
            else:
                self._DEBUG('DRY-RUN! NOT deleting "password-nonce" token for user: %s x> %s' % (sUsername, sFileToken_nonce), TokenPlugin.DEBUG_WARNING)
        except Exception as e:
            self._DEBUG('Failed to delete "password-nonce" token; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        self._EXIT_OK('Password nonce (PIN code) is no longer valid')


# Process
NukePasswordNonce().process()
