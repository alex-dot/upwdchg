#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import TokenPlugin
import ldap

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DRYRUN=True
UPWDCHG_PLUGIN_LDAP_URI='ldap://ldap.example.org:389'
UPWDCHG_PLUGIN_LDAP_VERSION=ldap.VERSION3
UPWDCHG_PLUGIN_LDAP_BIND_TYPE=ldap.AUTH_SIMPLE
UPWDCHG_PLUGIN_LDAP_ADMIN_DN='cn=admin,dc=example,dc=org'  # set to None to bind as user
UPWDCHG_PLUGIN_LDAP_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_LDAP_USER_DN='uid=%{USERNAME},ou=users,dc=example,dc=org'  # set to None to perform DN search
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN='ou=users,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER='uid=%{USERNAME}'

# Plugin
class ChangePasswordLdap(TokenPlugin):

    def __init__( self ):
        global UPWDCHG_PLUGIN_CRITICAL
        TokenPlugin.__init__( self, 'ChangePasswordLdap', UPWDCHG_PLUGIN_CRITICAL )

    def process( self ):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_LDAP_URI, \
            UPWDCHG_PLUGIN_LDAP_VERSION, \
            UPWDCHG_PLUGIN_LDAP_BIND_TYPE, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_DN, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_PWD, \
            UPWDCHG_PLUGIN_LDAP_USER_DN, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER

        # Get token (data)
        dToken = self._getToken()
        sUsername = dToken['username'].encode( 'utf-8' )
        sPasswordOld = dToken['password-old'].encode( 'utf-8' )
        sPasswordNew = dToken['password-new'].encode( 'utf-8' )

        # Process token data

        # ... LDAP bind credentials
        if UPWDCHG_PLUGIN_LDAP_ADMIN_DN is not None:
            sBindDn = UPWDCHG_PLUGIN_LDAP_ADMIN_DN
            if UPWDCHG_PLUGIN_LDAP_ADMIN_PWD is None:
                sBindPwd=''  # Really!?!
            elif UPWDCHG_PLUGIN_LDAP_ADMIN_PWD.startswith( 'file://' ):
                __sFile = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD[7:]
                try:
                    __oFile = open( __sFile, 'r' )
                    sBindPwd = __oFile.readline()
                    __oFile.close()
                except Exception as e:
                    self._DEBUG( 'Failed to retrieve LDAP bind password from file; %s' % str( e ) )
                    self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            else:
                sBindPwd = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD
        else:
            sBindDn = UPWDCHG_PLUGIN_LDAP_USER_DN.replace( '%{USERNAME}', sUsername )
            sBindPwd = sPasswordOld

        # ... LDAP bind
        try:
            oLdap = ldap.initialize( UPWDCHG_PLUGIN_LDAP_URI )
            oLdap.protocol_version = UPWDCHG_PLUGIN_LDAP_VERSION
            oLdap.bind_s( sBindDn, sBindPwd, UPWDCHG_PLUGIN_LDAP_BIND_TYPE )
        except Exception as e:
            self._DEBUG( 'Failed to bind to LDAP server; %s' % str( e ) )
            if UPWDCHG_PLUGIN_LDAP_ADMIN_DN is not None:
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            else:
                self._EXIT_ERROR( 'Invalid LDAP credentials' )

        # ... LDAP user DN
        if UPWDCHG_PLUGIN_LDAP_USER_DN is None:
            try:
                lLdapResults = oLdap.search_s(
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER.replace( '%{USERNAME}', sUsername ),
                    [ 'dn' ], 1,
                    )
                if not lLdapResults:
                    raise Exception( 'user not found' )
                elif len( lLdapResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform LDAP user DN search; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            ( sUserDn, dAttrs ) = lLdapResults[0]
        else:
            sUserDn = UPWDCHG_PLUGIN_LDAP_USER_DN.replace( '%{USERNAME}', sUsername )

        # ... LDAP password change
        if not UPWDCHG_PLUGIN_DRYRUN:
            try:
                if UPWDCHG_PLUGIN_LDAP_ADMIN_DN is not None:
                    oLdap.passwd_s( sUserDn, None, sPasswordNew )
                else:
                    oLdap.passwd_s( sUserDn, sPasswordOld, sPasswordNew )
            except Exception as e:
                self._DEBUG( 'Failed to change LDAP password; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # ... LDAP unbind
        try:
            oLdap.unbind_s()
        except Exception as e:
            self._DEBUG( 'Failed to unbind from LDAP server; %s' % str( e ) )

        # Done
        self._EXIT_OK( 'LDAP password successfully changed' )

# Process
ChangePasswordLdap().process()

