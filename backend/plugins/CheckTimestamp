#!/usr/bin/env python3
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014-2018 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
# SPDX-License-Identifier: GPL-3.0
# License-Filename: LICENSE/GPL-3.0.txt
#

#------------------------------------------------------------------------------
# DEPENDENCIES
#------------------------------------------------------------------------------

# UPwdChg
from UPwdChg import TokenPlugin


#------------------------------------------------------------------------------
# CONFIGURATION
#------------------------------------------------------------------------------

# UPwdChg
UPWDCHG_PLUGIN_NAME='CheckTimestamp'
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO

# Time-to-Live (in seconds); int: 0/None=ignore
UPWDCHG_PLUGIN_TIMESTAMP_TTL=3600


#------------------------------------------------------------------------------
# PLUGIN
#------------------------------------------------------------------------------

class CheckTimestamp(TokenPlugin):

    def __init__(self):
        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)


    def process(self):
        # Get token (data)
        oToken = self._getToken()

        # Check timestamp
        try:
            # ... TTL
            if UPWDCHG_PLUGIN_TIMESTAMP_TTL and oToken.checkData_Timestamp(UPWDCHG_PLUGIN_TIMESTAMP_TTL) != 0:
                self._DEBUG('Token is too old; %s (TTL: %d seconds)' % (oToken['timestamp'], UPWDCHG_PLUGIN_TIMESTAMP_TTL))
                self._EXIT_ERROR('Internal error; please contact your system administrator')
            self._DEBUG('Valid timestamp', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to check token timestamp; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        self._EXIT_OK('Valid creation date/time')


# Process
CheckTimestamp().process()
