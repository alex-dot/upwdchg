#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; coding:utf-8 -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import TokenPlugin
import ldap

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO
UPWDCHG_PLUGIN_DRYRUN=True

# ... (source) LDAP directory
UPWDCHG_PLUGIN_LDAP_SRC_URI='ldap://ldap.example.org:389'
UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_DN='cn=admin,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
# ... group synchronization
UPWDCHG_PLUGIN_LDAP_SRC_USER_DN=None  # set to None to perform DN search
UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_DN='ou=users,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_FILTER='(&(objectClass=posixAccount)(uid=%{USERNAME}))'
UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_DN='ou=groups,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_FILTER_MEMBERSHIP='(&(objectClass=posixGroup)(memberUid=%{USERNAME}))'
UPWDCHG_PLUGIN_LDAP_SRC_GROUP_ATTR_NAME='cn'

# ... (destination) LDAP directory
UPWDCHG_PLUGIN_LDAP_DST_URI='ldap://ad.example.org:389'
UPWDCHG_PLUGIN_LDAP_DST_ADMIN_DN='Administrator@EXAMPLE.ORG'
UPWDCHG_PLUGIN_LDAP_DST_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_LDAP_DST_USER_DN=None  # set to None to perform DN search
UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_DN='ou=Users,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_FILTER='(&(objectClass=user)(uid=%{USERNAME}))'
# ... group synchronization
UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_DN='ou=Users,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_FILTER='(&(objectClass=group)(cn=%{GROUPNAME}))'
UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_FILTER_MEMBERSHIP='(&(objectClass=group)(member=%{USERDN}))'
UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_NAME='cn'
# ... membership attributes
UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER='member'
UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER_VALUE='%{USERDN}'
UPWDCHG_PLUGIN_LDAP_DST_GROUP_ADD=True
UPWDCHG_PLUGIN_LDAP_DST_GROUP_REMOVE=True
UPWDCHG_PLUGIN_LDAP_DST_GROUP_CRITICAL=False

# Plugin
class SynchGroupsMemberLdap(TokenPlugin):

    def __init__(self):
        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
        TokenPlugin.__init__(self, 'SynchGroupsMemberLdap', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)


    def __ldapSrcBind(self):
        global \
            UPWDCHG_PLUGIN_LDAP_SRC_URI, \
            UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_DN, \
            UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_PWD

        # Check parameters
        if not UPWDCHG_PLUGIN_LDAP_SRC_URI:
            self._DEBUG('Missing (source LDAP) server address (URI)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if not UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_DN:
            self._DEBUG('Missing (source LDAP) administrator distinguished name (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Bind to server

        # ... initialize connection
        try:
            oLdap = ldap.initialize(UPWDCHG_PLUGIN_LDAP_SRC_URI)
            oLdap.protocol_version = ldap.VERSION3
            self._DEBUG('Successfully initialized (source LDAP) connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to initialize (source LDAP) connection; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind credentials
        sBindDn = UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_DN
        if not UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_PWD:
            sBindPwd=''  # Really!?!
        elif UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_PWD.startswith('file://'):
            sFile = UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_PWD[7:]
            try:
                oFile = open(sFile, 'r')
                sBindPwd = oFile.readline()
                oFile.close()
            except Exception as e:
                self._DEBUG('Failed to retrieve (source LDAP) bind password from file; %s' % str(e))
                self._EXIT_ERROR('Internal error; please contact your system administrator')
        else:
            sBindPwd = UPWDCHG_PLUGIN_LDAP_SRC_ADMIN_PWD
        self._DEBUG('Binding to server as: %s' % sBindDn, TokenPlugin.DEBUG_TRACE)

        # ... bind to server
        try:
            oLdap.bind_s(sBindDn, sBindPwd, ldap.AUTH_SIMPLE)
            self._DEBUG('Successfully bound to (source LDAP) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to bind to (source LDAP) server; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return oLdap


    def __ldapSrcGetUserDn(self, oLdap, sUsername):
        global \
            UPWDCHG_PLUGIN_LDAP_SRC_USER_DN, \
            UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_FILTER

        # Retrieve user DN
        try:
            if not UPWDCHG_PLUGIN_LDAP_SRC_USER_DN:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_LDAP_SRC_USER_SEARCH_FILTER.replace('%{USERNAME}', sUsername),
                    attrlist=None, attrsonly=1, sizelimit=2
                    )
            else:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_SRC_USER_DN.replace('%{USERNAME}', sUsername),
                    ldap.SCOPE_BASE,
                    '(objectClass=*)',
                    attrlist=None, attrsonly=1, sizelimit=2
                    )
            if not lLdapResults:
                raise Exception('user not found: %s' % sUsername)
            elif len(lLdapResults) > 1:
                raise Exception('too many match: %s' % sUsername)
            sUserDn = lLdapResults[0][0]
            self._DEBUG('Successfully retrieved (source LDAP) user: %s' % sUserDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve (source LDAP) user; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return sUserDn


    def __ldapSrcGetGroups(self, oLdap, sUsername, sUserDn):
        global \
            UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_FILTER_MEMBERSHIP, \
            UPWDCHG_PLUGIN_LDAP_SRC_GROUP_ATTR_NAME

        # Return variable
        dGroups = dict()

        # Check parameters
        if not UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_DN:
            self._DEBUG('Missing (source LDAP) group search base (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Retrieve user groups

        # ... groups
        try:
            lLdapResults = oLdap.search_ext_s(
                UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_DN,
                UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_SCOPE,
                UPWDCHG_PLUGIN_LDAP_SRC_GROUP_SEARCH_FILTER_MEMBERSHIP.replace('%{USERNAME}', sUsername).replace('%{USERDN}', sUserDn),
                attrlist=[UPWDCHG_PLUGIN_LDAP_SRC_GROUP_ATTR_NAME], attrsonly=0
                )
            for tLdapResult in lLdapResults:
                dGroups[ tLdapResult[1][UPWDCHG_PLUGIN_LDAP_SRC_GROUP_ATTR_NAME][0] ] = tLdapResult[0]
            self._DEBUG('Successfully retrieved user groups from (source LDAP) server:\n%s' % str(dGroups), TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve user groups from (source LDAP) server; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return dGroups


    def __ldapSrcUnbind(self, oLdap):

        # Unbind from server
        try:
            oLdap.unbind_s()
            self._DEBUG('Succesfully unbound from (source LDAP) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to unbind from (source LDAP) server; %s' % str(e))


    def __ldapDstBind(self):
        global \
            UPWDCHG_PLUGIN_LDAP_DST_URI, \
            UPWDCHG_PLUGIN_LDAP_DST_ADMIN_DN, \
            UPWDCHG_PLUGIN_LDAP_DST_ADMIN_PWD

        # Check parameters
        if not UPWDCHG_PLUGIN_LDAP_DST_URI:
            self._DEBUG('Missing (destination LDAP) server address (URI)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if not UPWDCHG_PLUGIN_LDAP_DST_ADMIN_DN:
            self._DEBUG('Missing (destination LDAP) administrator distinguished name (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Bind to server

        # ... initialize connection
        try:
            oLdap = ldap.initialize(UPWDCHG_PLUGIN_LDAP_DST_URI)
            oLdap.protocol_version = ldap.VERSION3
            self._DEBUG('Successfully initialized (destination LDAP) connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to initialize (destination LDAP) connection; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind credentials
        sBindDn = UPWDCHG_PLUGIN_LDAP_DST_ADMIN_DN
        if not UPWDCHG_PLUGIN_LDAP_DST_ADMIN_PWD:
            sBindPwd=''  # Really!?!
        elif UPWDCHG_PLUGIN_LDAP_DST_ADMIN_PWD.startswith('file://'):
            sFile = UPWDCHG_PLUGIN_LDAP_DST_ADMIN_PWD[7:]
            try:
                oFile = open(sFile, 'r')
                sBindPwd = oFile.readline()
                oFile.close()
            except Exception as e:
                self._DEBUG('Failed to retrieve (destination LDAP) bind password from file; %s' % str(e))
                self._EXIT_ERROR('Internal error; please contact your system administrator')
        else:
            sBindPwd = UPWDCHG_PLUGIN_LDAP_DST_ADMIN_PWD
        self._DEBUG('Binding to (destination LDAP) server as: %s' % sBindDn, TokenPlugin.DEBUG_TRACE)

        # ... bind to server
        try:
            oLdap.bind_s(sBindDn, sBindPwd, ldap.AUTH_SIMPLE)
            self._DEBUG('Successfully bound to (destination LDAP) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to bind to (destination LDAP) server; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return oLdap


    def __ldapDstGetUserDn(self, oLdap, sUsername):
        global \
            UPWDCHG_PLUGIN_LDAP_DST_USER_DN, \
            UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_FILTER

        # Retrieve user DN
        try:
            if not UPWDCHG_PLUGIN_LDAP_DST_USER_DN:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_LDAP_DST_USER_SEARCH_FILTER.replace('%{USERNAME}', sUsername),
                    attrlist=None, attrsonly=1, sizelimit=2
                    )
            else:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_DST_USER_DN.replace('%{USERNAME}', sUsername),
                    ldap.SCOPE_BASE,
                    '(objectClass=*)',
                    attrlist=None, attrsonly=1, sizelimit=2
                    )
            if not lLdapResults:
                raise Exception('user not found: %s' % sUsername)
            elif len(lLdapResults) > 1:
                raise Exception('too many match: %s' % sUsername)
            sUserDn = lLdapResults[0][0]
            self._DEBUG('Successfully retrieved (destination LDAP) user: %s' % sUserDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve (destination LDAP) user; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return sUserDn


    def __ldapDstGetGroups(self, oLdap, sUsername, sUserDn):
        global \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_FILTER_MEMBERSHIP, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_NAME

        # Return variable
        dGroups = dict()

        # Check parameters
        if not UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_DN:
            self._DEBUG('Missing (destination LDAP) group search base (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Retrieve user groups

        # ... groups
        try:
            lLdapResults = oLdap.search_ext_s(
                UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_DN,
                UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_SCOPE,
                UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_FILTER_MEMBERSHIP.replace('%{USERNAME}', sUsername).replace('%{USERDN}', sUserDn),
                attrlist=[UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_NAME], attrsonly=0
                )
            for tLdapResult in lLdapResults:
                dGroups[ tLdapResult[1][UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_NAME][0] ] = tLdapResult[0]
            self._DEBUG('Successfully retrieved user groups from (destination LDAP) server', TokenPlugin.DEBUG_NOTICE)
            self._DEBUG('> user groups:\n%s' % str(dGroups), TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve user groups from (destination LDAP) server; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return dGroups


    def __ldapDstAddUserToGroup(self, oLdap, sGroupname, sUsername, sUserDn):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_FILTER, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER_VALUE, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_CRITICAL

        # Add user to group

        # ... group DN
        try:
            lLdapResults = oLdap.search_ext_s(
                UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_DN,
                UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_SCOPE,
                UPWDCHG_PLUGIN_LDAP_DST_GROUP_SEARCH_FILTER.replace('%{GROUPNAME}', sGroupname),
                attrlist=None, attrsonly=1, sizelimit=2
                )
            if not lLdapResults:
                raise Exception('group not found: %s' % sGroupname)
            elif len(lLdapResults) > 1:
                raise Exception('too many match: %s' % sGroupname)
            sGroupDn = lLdapResults[0][0]
            self._DEBUG('Successfully retrieved group from (destination LDAP) server: %s' % sGroupDn, TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to retrieve group from (destination LDAP) server; %s' % str(e))
            if UPWDCHG_PLUGIN_LDAP_DST_GROUP_CRITICAL:
                self._EXIT_ERROR('Internal error; please contact your system administrator')
            else:
                return

        # ... add user to group
        sMembershipAttr = UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER
        sMembershipAttrValue = UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER_VALUE.replace('%{USERNAME}', sUsername).replace('%{USERDN}', sUserDn)
        if UPWDCHG_PLUGIN_DRYRUN:
            self._DEBUG('DRY-RUN! NOT adding (destination LDAP) group membership: %s' % sGroupDn, TokenPlugin.DEBUG_WARNING)
            return
        try:
            lLDIF = [ (ldap.MOD_ADD, sMembershipAttr, sMembershipAttrValue) ]
            oLdap.modify_s(sGroupDn, lLDIF)
            self._DEBUG('Successfully added (destination LDAP) group membership: %s' % sGroupDn, TokenPlugin.DEBUG_INFO)
        except Exception as e:
            self._DEBUG('Failed to add (destination LDAP) group membership; %s' % str(e))
            if UPWDCHG_PLUGIN_LDAP_DST_GROUP_CRITICAL:
                self._EXIT_ERROR('Internal error; please contact your system administrator')
            else:
                return


    def __ldapDstRemoveUserFromGroup(self, oLdap, sGroupDn, sUsername, sUserDn):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER_VALUE, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_CRITICAL

        # Remove user from group
        sMembershipAttr = UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER
        sMembershipAttrValue = UPWDCHG_PLUGIN_LDAP_DST_GROUP_ATTR_MEMBER_VALUE.replace('%{USERNAME}', sUsername).replace('%{USERDN}', sUserDn)
        if UPWDCHG_PLUGIN_DRYRUN:
            self._DEBUG('DRY-RUN! NOT removing (destination LDAP) group membership: %s' % sGroupDn, TokenPlugin.DEBUG_WARNING)
            return
        try:
            lLDIF = [ (ldap.MOD_DELETE, sMembershipAttr, sMembershipAttrValue) ]
            oLdap.modify_s(sGroupDn, lLDIF)
            self._DEBUG('Successfully removed (destination LDAP) group membership: %s' % sGroupDn, TokenPlugin.DEBUG_INFO)
        except Exception as e:
            self._DEBUG('Failed to remove (destination LDAP) group membership; %s' % str(e))
            if UPWDCHG_PLUGIN_LDAP_DST_GROUP_CRITICAL:
                self._EXIT_ERROR('Internal error; please contact your system administrator')
            else:
                return


    def __ldapDstUnbind(self, oLdap):

        # Unbind from server
        try:
            oLdap.unbind_s()
            self._DEBUG('Succesfully unbound from (destination LDAP) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to unbind from (destination LDAP) server; %s' % str(e))


    def process(self):
        global \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_ADD, \
            UPWDCHG_PLUGIN_LDAP_DST_GROUP_REMOVE

        # Get token (data)
        dToken = self._getToken()
        sUsername = dToken['username'].encode('utf-8')

        # Process token data

        # ... bind
        oLdapSrc = self.__ldapSrcBind()
        oLdapDst = self.__ldapDstBind()

        # ... user DN
        sUserDnSrc = self.__ldapSrcGetUserDn(oLdapSrc, sUsername)
        sUserDnDst = self.__ldapDstGetUserDn(oLdapDst, sUsername)

        # ... groups membership synchronization
        dGroupsSrc = self.__ldapSrcGetGroups(oLdapSrc, sUsername, sUserDnSrc)
        dGroupsDst = self.__ldapDstGetGroups(oLdapDst, sUsername, sUserDnDst)
        if UPWDCHG_PLUGIN_LDAP_DST_GROUP_ADD:
            for sGroupname in [ s for s in dGroupsSrc if s not in dGroupsDst ]:
                self._DEBUG('Add group membership: %s' % sGroupname, TokenPlugin.DEBUG_NOTICE)
                self.__ldapDstAddUserToGroup(oLdapDst, sGroupname, sUsername, sUserDnDst)
        if UPWDCHG_PLUGIN_LDAP_DST_GROUP_REMOVE:
            for sGroupname in [ s for s in dGroupsDst if s not in dGroupsSrc ]:
                self._DEBUG('Remove group membership: %s' % sGroupname, TokenPlugin.DEBUG_NOTICE)
                self.__ldapDstRemoveUserFromGroup(oLdapDst, dGroupsDst[sGroupname], sUsername, sUserDnDst)

        # ... unbind
        self.__ldapSrcUnbind(oLdapSrc)
        self.__ldapDstUnbind(oLdapDst)

        # Done
        self._EXIT_OK('Groups membership successfully synchronized')

# Process
SynchGroupsMemberLdap().process()
