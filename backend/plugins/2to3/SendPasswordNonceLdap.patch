--- 2/SendPasswordNonceLdap
+++ 3/SendPasswordNonceLdap
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
 # ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent
 
@@ -24,12 +24,24 @@
-# Modules
-# ... deb: python-ldap
-from UPwdChg import \
-     UPWDCHG_DEFAULT_DIR_PUBLIC, \
-     TokenPlugin
-from email.mime.text import MIMEText
+#------------------------------------------------------------------------------
+# DEPENDENCIES
+#------------------------------------------------------------------------------
+
+# UPwdChg
+from UPwdChg import TokenPlugin
+
+# Extra
+# ... deb: python3-ldap
 import ldap
+
+# Standard
+from email.mime.text import MIMEText
 import os
 from subprocess import Popen, PIPE
 import sys
 
-# Parameters
+
+#------------------------------------------------------------------------------
+# CONFIGURATION
+#------------------------------------------------------------------------------
+
+# UPwdChg
+UPWDCHG_PLUGIN_NAME='SendPasswordNonceLdap'
@@ -61,28 +73,13 @@
-# Plugin
+
+#------------------------------------------------------------------------------
+# PLUGIN
+#------------------------------------------------------------------------------
+
 class SendPasswordNonceLdap(TokenPlugin):
 
     def __init__(self):
-        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
-        TokenPlugin.__init__(self, 'SendPasswordNonceLdap', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
+        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
 
-    def process(self):
-        global \
-            UPWDCHG_PLUGIN_DRYRUN, \
-            UPWDCHG_PLUGIN_PASSWORD_NONCE_LENGTH, \
-            UPWDCHG_PLUGIN_PASSWORD_NONCE_TTL, \
-            UPWDCHG_PLUGIN_LDAP_URI, \
-            UPWDCHG_PLUGIN_LDAP_ADMIN_DN, \
-            UPWDCHG_PLUGIN_LDAP_ADMIN_PWD, \
-            UPWDCHG_PLUGIN_LDAP_USER_DN, \
-            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN, \
-            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE, \
-            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER, \
-            UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE, \
-            UPWDCHG_PLUGIN_EMAIL_SENDER, \
-            UPWDCHG_PLUGIN_EMAIL_RECIPIENT, \
-            UPWDCHG_PLUGIN_EMAIL_SUBJECT, \
-            UPWDCHG_PLUGIN_EMAIL_BODY, \
-            UPWDCHG_PLUGIN_EMAIL_SENDMAIL, \
-            UPWDCHG_PLUGIN_EMAIL_ENCODING
 
-        # Check parameters
+    def process(self):
+        # Check configuration
@@ -98,12 +93,11 @@
 
         # Get token (data)
         oToken = self._getToken()
-        uUsername = oToken['username']
-        sUsername = uUsername.encode('utf-8')
+        sUsername = oToken['username']
         if 'session-id' in oToken.keys():
-            uSessionId = oToken['session-id']
+            sSessionId = oToken['session-id']
         else:
-            uSessionId = None
+            sSessionId = None
 
         # Retrieve destination form LDAP
 
@@ -190,38 +184,38 @@
             self._DEBUG('Failed to retrieve attribute; %s' % UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE)
             self._EXIT_ERROR('Internal error; please contact your system administrator')
         else:
-            self._DEBUG('Successfully retrieved attribute: %s=%s' % (UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE, dAttrs[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE][0]), TokenPlugin.DEBUG_TRACE)
+            self._DEBUG('Successfully retrieved attribute: %s=%s' % (UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE, dAttrs[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE][0].decode('utf-8')), TokenPlugin.DEBUG_TRACE)
 
         # Create "password-nonce" token
         try:
             oToken_nonce = self._getTokenWriter()
-            sPasswordNonce = oToken_nonce.makePasswordNonce(UPWDCHG_PLUGIN_PASSWORD_NONCE_LENGTH, _sFileRandom=self._sFileRandom)
-            (uPasswordNonce_id, uPasswordNonce_secret) = oToken_nonce.splitPasswordNonce(sPasswordNonce)
-            oToken_nonce.setData_PasswordNonce(uUsername, sPasswordNonce, UPWDCHG_PLUGIN_PASSWORD_NONCE_TTL, uSessionId)
-            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+uPasswordNonce_id.encode(sys.getfilesystemencoding())+'.nonce'
+            sPasswordNonce = oToken_nonce.makePasswordNonce(UPWDCHG_PLUGIN_PASSWORD_NONCE_LENGTH)
+            (sPasswordNonce_id, sPasswordNonce_secret) = oToken_nonce.splitPasswordNonce(sPasswordNonce)
+            oToken_nonce.setData_PasswordNonce(sUsername, sPasswordNonce, UPWDCHG_PLUGIN_PASSWORD_NONCE_TTL, sSessionId)
+            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+sPasswordNonce_id+'.nonce'
             if not UPWDCHG_PLUGIN_DRYRUN:
                 if oToken_nonce.writeToken(sFileToken_nonce):
                     self._DEBUG('Failed to write "password-nonce" token; %s' % sFileToken_nonce)
                     self._EXIT_ERROR('Internal error; please contact your system administrator')
-                self._DEBUG('Successfully created "password-nonce" token for user: %s -> %s' % (uUsername, sFileToken_nonce), TokenPlugin.DEBUG_INFO)
+                self._DEBUG('Successfully created "password-nonce" token for user: %s -> %s' % (sUsername, sFileToken_nonce), TokenPlugin.DEBUG_INFO)
             else:
-                self._DEBUG('DRY-RUN! NOT creating "password-nonce" token for user: %s -> %s' % (uUsername, sFileToken_nonce), TokenPlugin.DEBUG_WARNING)
+                self._DEBUG('DRY-RUN! NOT creating "password-nonce" token for user: %s -> %s' % (sUsername, sFileToken_nonce), TokenPlugin.DEBUG_WARNING)
         except Exception as e:
             self._DEBUG('Failed to create "password-nonce" token; %s' % str(e))
             self._EXIT_ERROR('Internal error; please contact your system administrator')
 
         # Send password nonce to LDAP-retrieved recipient
         try:
-            sEmailUser = dAttrs[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE][0]
-            sEmailRecipient = UPWDCHG_PLUGIN_EMAIL_RECIPIENT.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING).replace('%{LDAP_MAIL}', sEmailUser)
-            sEmailBody = UPWDCHG_PLUGIN_EMAIL_BODY.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING).replace('%{PASSWORD_NONCE}', sPasswordNonce)
-            oMIMEText = MIMEText(sEmailBody, 'plain', UPWDCHG_PLUGIN_EMAIL_ENCODING)
-            oMIMEText['From'] = UPWDCHG_PLUGIN_EMAIL_SENDER.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING)
-            oMIMEText['Subject'] = UPWDCHG_PLUGIN_EMAIL_SUBJECT.encode(UPWDCHG_PLUGIN_EMAIL_ENCODING)
+            sEmailUser = dAttrs[UPWDCHG_PLUGIN_LDAP_USER_MAIL_ATTRIBUTE][0].decode('utf-8')
+            sEmailRecipient = UPWDCHG_PLUGIN_EMAIL_RECIPIENT.replace('%{LDAP_MAIL}', sEmailUser)
+            sEmailBody = UPWDCHG_PLUGIN_EMAIL_BODY.replace('%{PASSWORD_NONCE}', sPasswordNonce)
+            oMIMEText = MIMEText(sEmailBody, 'plain')
+            oMIMEText['From'] = UPWDCHG_PLUGIN_EMAIL_SENDER
+            oMIMEText['Subject'] = UPWDCHG_PLUGIN_EMAIL_SUBJECT
             oMIMEText['To'] = sEmailRecipient
             if not UPWDCHG_PLUGIN_DRYRUN:
                 oPopen = Popen([UPWDCHG_PLUGIN_EMAIL_SENDMAIL, '-t'], stdin=PIPE)
-                oPopen.communicate(oMIMEText.as_string())
+                oPopen.communicate(oMIMEText.as_string().encode(sys.stdin.encoding))
                 self._DEBUG('Successfully sent password nonce to user: %s' % sEmailRecipient, TokenPlugin.DEBUG_INFO)
             else:
                 self._DEBUG('DRY-RUN! NOT sending password nonce to user: %s' % sEmailRecipient, TokenPlugin.DEBUG_WARNING)
@@ -232,5 +226,6 @@
         # Done
         self._EXIT_OK('Password nonce (PIN code) succesfully sent (to %s)' % sEmailUser)
 
+
 # Process
 SendPasswordNonceLdap().process()
