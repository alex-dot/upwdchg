--- 2/CheckPasswordNonce
+++ 3/CheckPasswordNonce
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
 # ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent
 
@@ -24,8 +24,18 @@
-# Modules
-from UPwdChg import \
-     UPWDCHG_DEFAULT_DIR_PUBLIC, \
-     TokenPlugin
+#------------------------------------------------------------------------------
+# DEPENDENCIES
+#------------------------------------------------------------------------------
+
+# UPwdChg
+from UPwdChg import TokenPlugin
+
+# Standard
 import os
 import sys
 
-# Parameters
+
+#------------------------------------------------------------------------------
+# CONFIGURATION
+#------------------------------------------------------------------------------
+
+# UPwdChg
+UPWDCHG_PLUGIN_NAME='CheckPasswordNonce'
@@ -38,38 +48,40 @@
-# Plugin
+
+#------------------------------------------------------------------------------
+# PLUGIN
+#------------------------------------------------------------------------------
+
 class CheckPasswordNonce(TokenPlugin):
 
     def __init__(self):
-        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
-        TokenPlugin.__init__(self, 'CheckPasswordNonce', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
+        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
 
-    def process(self):
-        global UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR
 
+    def process(self):
         # Get token (data)
         oToken = self._getToken()
-        uUsername = oToken['username']
+        sUsername = oToken['username']
         if 'password-nonce' not in oToken.keys():
             self._DEBUG('Token has no "password-nonce" attribute')
             self._EXIT_ERROR('Internal error; please contact your system administrator')
-        uPasswordNonce = oToken['password-nonce']
-        (uPasswordNonce_id, uPasswordNonce_secret) = oToken.splitPasswordNonce(uPasswordNonce)
+        sPasswordNonce = oToken['password-nonce']
+        (sPasswordNonce_id, sPasswordNonce_secret) = oToken.splitPasswordNonce(sPasswordNonce)
         if 'session-id' in oToken.keys():
-            uSessionId = oToken['session-id']
+            sSessionId = oToken['session-id']
         else:
-            uSessionId = None
+            sSessionId = None
 
         # Check corresponding "password-nonce" token
         try:
-            # ... read token
-            oToken_nonce = self._getTokenReader()
-            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+uPasswordNonce_id.encode(sys.getfilesystemencoding())+'.nonce'
+            # ... read token (originally encrypted/signed for the frontend)
+            oToken_nonce = self._getTokenReader('frontend', 'backend')
+            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+sPasswordNonce_id+'.nonce'
             if oToken_nonce.readToken(sFileToken_nonce):
                 self._DEBUG('Invalid "password-nonce" ID/file; %s' % sFileToken_nonce)
                 self._EXIT_ERROR('Invalid password nonce (PIN code)')
 
             # ... check password nonce
-            iReturn = oToken_nonce.checkData_PasswordNonce(uUsername, uPasswordNonce, uSessionId)
+            iReturn = oToken_nonce.checkData_PasswordNonce(sUsername, sPasswordNonce, sSessionId)
             if iReturn:
                 if iReturn == 1:
                     self._DEBUG('"password-nonce" token has expired; %s' % sFileToken_nonce)
-                    self._EXIT_ERROR('Password nonce (PIN code) has expired; %s-...' % uPasswordNonce_id)
+                    self._EXIT_ERROR('Password nonce (PIN code) has expired; %s-...' % sPasswordNonce_id)
@@ -89,5 +100,6 @@
         # Done
         self._EXIT_OK('Valid password nonce (PIN code)')
 
+
 # Process
 CheckPasswordNonce().process()
