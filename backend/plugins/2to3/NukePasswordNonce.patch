--- 2/NukePasswordNonce
+++ 3/NukePasswordNonce
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
 # ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent
 
@@ -24,8 +24,18 @@
-# Modules
-from UPwdChg import \
-     UPWDCHG_DEFAULT_DIR_PUBLIC, \
-     TokenPlugin
+#------------------------------------------------------------------------------
+# DEPENDENCIES
+#------------------------------------------------------------------------------
+
+# UPwdChg
+from UPwdChg import TokenPlugin
+
+# Standard
 import os
 import sys
 
-# Parameters
+
+#------------------------------------------------------------------------------
+# CONFIGURATION
+#------------------------------------------------------------------------------
+
+# UPwdChg
+UPWDCHG_PLUGIN_NAME='NukePasswordNonce'
@@ -39,27 +49,29 @@
-# Plugin
+
+#------------------------------------------------------------------------------
+# PLUGIN
+#------------------------------------------------------------------------------
+
 class NukePasswordNonce(TokenPlugin):
 
     def __init__(self):
-        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
-        TokenPlugin.__init__(self, 'NukePasswordNonce', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
+        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
 
-    def process(self):
-        global UPWDCHG_PLUGIN_DRYRUN, UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR
 
+    def process(self):
         # Get token (data)
         oToken = self._getToken()
-        uUsername = oToken['username']
+        sUsername = oToken['username']
         if 'password-nonce' not in oToken.getData().keys():
             self._DEBUG('Token contains no password nonce')
             self._EXIT_ERROR('Internal error; please contact your system administrator')
-        uPasswordNonce = oToken['password-nonce']
-        (uPasswordNonce_id, uPasswordNonce_secret) = oToken.splitPasswordNonce(uPasswordNonce)
+        sPasswordNonce = oToken['password-nonce']
+        (sPasswordNonce_id, sPasswordNonce_secret) = oToken.splitPasswordNonce(sPasswordNonce)
 
         # Delete "password-nonce" token
         try:
-            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+uPasswordNonce_id.encode(sys.getfilesystemencoding())+'.nonce'
+            sFileToken_nonce = UPWDCHG_PLUGIN_PASSWORD_NONCE_DIR.rstrip(os.sep)+os.sep+sPasswordNonce_id+'.nonce'
             if not UPWDCHG_PLUGIN_DRYRUN:
                 os.remove(sFileToken_nonce)
-                self._DEBUG('Successfully deleted "password-nonce" token for user: %s x> %s' % (uUsername, sFileToken_nonce), TokenPlugin.DEBUG_INFO)
+                self._DEBUG('Successfully deleted "password-nonce" token for user: %s x> %s' % (sUsername, sFileToken_nonce), TokenPlugin.DEBUG_INFO)
             else:
-                self._DEBUG('DRY-RUN! NOT deleting "password-nonce" token for user: %s x> %s' % (uUsername, sFileToken_nonce), TokenPlugin.DEBUG_WARNING)
+                self._DEBUG('DRY-RUN! NOT deleting "password-nonce" token for user: %s x> %s' % (sUsername, sFileToken_nonce), TokenPlugin.DEBUG_WARNING)
@@ -70,5 +81,6 @@
         # Done
         self._EXIT_OK('Password nonce (PIN code) is no longer valid')
 
+
 # Process
 NukePasswordNonce().process()
