--- 2/ChangePasswordKrb5
+++ 3/ChangePasswordKrb5
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; -*-
 # ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent
 
@@ -24,5 +24,18 @@
-# Modules
+#------------------------------------------------------------------------------
+# DEPENDENCIES
+#------------------------------------------------------------------------------
+
+# UPwdChg
 from UPwdChg import TokenPlugin
+
+# Standard
 import subprocess as SP
+import sys
+
 
-# Parameters
+#------------------------------------------------------------------------------
+# CONFIGURATION
+#------------------------------------------------------------------------------
+
+# UPwdChg
+UPWDCHG_PLUGIN_NAME='ChangePasswordKrb5'
@@ -37,14 +50,21 @@
-# Plugin
+
+#------------------------------------------------------------------------------
+# PLUGIN
+#------------------------------------------------------------------------------
+
 class ChangePasswordKrb5(TokenPlugin):
 
     def __init__(self):
-        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
-        TokenPlugin.__init__(self, 'ChangePasswordKrb5', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
+        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
 
-    def process(self):
-        global \
-            UPWDCHG_PLUGIN_DRYRUN, \
-            UPWDCHG_PLUGIN_KRB5_PRINCIPAL, \
-            UPWDCHG_PLUGIN_KRB5_ADMSRV
 
-        # Check parameters
+    def __escapeLocal(self, _s):
+        return _s.replace('"', '""')
+
+
+    def __escapeSsh(self, _s):
+        return _s.replace('"', '""').replace('\'', '\'"\'"\'')
+
+
+    def process(self):
+        # Check configuration
@@ -57,8 +68,8 @@
 
         # Get token (data)
         oToken = self._getToken()
-        sUsername = oToken['username'].encode('utf-8')
-        sPasswordNew = oToken['password-new'].encode('utf-8')
+        sUsername = oToken['username']
+        sPasswordNew = oToken['password-new']
 
         # Change Kerberos password
 
@@ -68,13 +88,15 @@
         # ... password change
         try:
             if not UPWDCHG_PLUGIN_DRYRUN:
-                lCommand = [ 'kadmin.local', '-q', "'change_password -pw \"%s\" \"%s\"'" % (sPasswordNew.replace('"', '""'), sPrincipal.replace('"', '""')) ]
-                if UPWDCHG_PLUGIN_KRB5_ADMSRV is not None:
-                    lCommand = [ 'ssh', '-x', UPWDCHG_PLUGIN_KRB5_ADMSRV, '--', ' '.join(lCommand) ]
+                if UPWDCHG_PLUGIN_KRB5_ADMSRV is None:
+                    lCommand = [ 'kadmin.local', '-q', "'change_password -pw \"%s\" \"%s\"'" % (self.__escapeLocal(sPasswordNew), self.__escapeLocal(sPrincipal)) ]
+                else:
+                    # WARNING: remote command is executed by OpenSSH via the (remote) user's shell!
+                    lCommand = [ 'ssh', '-x', UPWDCHG_PLUGIN_KRB5_ADMSRV, '--', 'kadmin.local', '-q', "'change_password -pw \"%s\" \"%s\"'" % (self.__escapeSsh(sPasswordNew), self.__escapeSsh(sPrincipal)) ]
                 oPopen = SP.Popen(lCommand, stdout=SP.PIPE, stderr=SP.PIPE)
-                (sStdOut, sStdErr) = oPopen.communicate()
-                if oPopen.returncode != 0 or sStdErr:
-                    raise Exception(sStdErr)
+                (byStdOut, byStdErr) = oPopen.communicate()
+                if oPopen.returncode != 0 or byStdErr:
+                    raise Exception(byStdErr.decode(sys.stderr.encoding))
                 self._DEBUG('Successfully changed password for principal: %s' % sPrincipal, TokenPlugin.DEBUG_INFO)
             else:
                 self._DEBUG('DRY-RUN! NOT changing password for principal: %s' % sPrincipal, TokenPlugin.DEBUG_WARNING)
@@ -85,5 +96,6 @@
         # Done
         self._EXIT_OK('Password successfully changed')
 
+
 # Process
 ChangePasswordKrb5().process()
