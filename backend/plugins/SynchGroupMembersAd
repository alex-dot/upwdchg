#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; coding:utf-8 -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import TokenPlugin
import ldap

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DRYRUN=True
# ... (destination) Active Directory
UPWDCHG_PLUGIN_AD_URI='ldap://ad.example.org:389'
UPWDCHG_PLUGIN_AD_ADMIN_DN='Administrator@EXAMPLE.ORG'  # MUST be specified
UPWDCHG_PLUGIN_AD_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_AD_USER_DN=None  # set to None to perform DN search
UPWDCHG_PLUGIN_AD_USER_SEARCH_DN='cn=Users,dc=example,dc=org'
UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER='uid=%{USERNAME}'
# ... group synchronization
UPWDCHG_PLUGIN_AD_GROUP_DN='cn=%{GROUPNAME},cn=Groups,dc=example,dc=org'  # set to None to perform DN search
UPWDCHG_PLUGIN_AD_GROUP_SEARCH_DN=None
UPWDCHG_PLUGIN_AD_GROUP_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_AD_GROUP_SEARCH_FILTER=None
UPWDCHG_PLUGIN_AD_GROUP_ATTR_MEMBER='memberUid'
UPWDCHG_PLUGIN_AD_GROUP_ATTR_MEMBER_VALUE='%{USERNAME}'
UPWDCHG_PLUGIN_AD_GROUP_CRITICAL=False
# ... (source) LDAP directory
UPWDCHG_PLUGIN_LDAP_URI='ldap://ldap.example.org:389'  # if None, no LDAP synchronization is performed
UPWDCHG_PLUGIN_LDAP_ADMIN_DN='cn=admin,dc=example,dc=org'  # set to None to bind as user
UPWDCHG_PLUGIN_LDAP_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_LDAP_USER_DN='uid=%{USERNAME},ou=users,dc=example,dc=org'
# ... group synchronization
UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_DN='ou=groups,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_FILTER='memberUid=%{USERNAME}'
UPWDCHG_PLUGIN_LDAP_GROUP_ATTR_NAME='cn'

# Plugin
class SynchGroupMembersAd(TokenPlugin):

    def __init__( self ):
        global UPWDCHG_PLUGIN_CRITICAL
        TokenPlugin.__init__( self, 'SynchGroupMembersAd', UPWDCHG_PLUGIN_CRITICAL )


    def __ldapBind( self, sUsername, sPassword ):
        global \
            UPWDCHG_PLUGIN_LDAP_URI, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_DN, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_PWD

        # Bind to LDAP server
        oLdap = None
        if not UPWDCHG_PLUGIN_LDAP_URI:
            return oLdap

        # ... LDAP bind credentials
        if UPWDCHG_PLUGIN_LDAP_ADMIN_DN:
            sBindDn = UPWDCHG_PLUGIN_LDAP_ADMIN_DN
            if not UPWDCHG_PLUGIN_LDAP_ADMIN_PWD:
                sBindPwd=''  # Really!?!
            elif UPWDCHG_PLUGIN_LDAP_ADMIN_PWD.startswith( 'file://' ):
                __sFile = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD[7:]
                try:
                    __oFile = open( __sFile, 'r' )
                    sBindPwd = __oFile.readline()
                    __oFile.close()
                except Exception as e:
                    self._DEBUG( 'Failed to retrieve LDAP bind password from file; %s' % str( e ) )
                    self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            else:
                sBindPwd = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD
        else:
            sBindDn = UPWDCHG_PLUGIN_LDAP_USER_DN.replace( '%{USERNAME}', sUsername )
            sBindPwd = sPassword

        # ... LDAP bind
        try:
            oLdap = ldap.initialize( UPWDCHG_PLUGIN_LDAP_URI )
            oLdap.protocol_version = ldap.VERSION3
            oLdap.bind_s( sBindDn, sBindPwd, ldap.AUTH_SIMPLE )
        except Exception as e:
            self._DEBUG( 'Failed to bind to LDAP server; %s' % str( e ) )
            if UPWDCHG_PLUGIN_LDAP_ADMIN_DN:
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            else:
                self._EXIT_ERROR( 'Invalid LDAP credentials' )

        # Done
        return oLdap


    def __ldapGetGroups( self, oLdap, sUsername ):
        global \
            UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_FILTER, \
            UPWDCHG_PLUGIN_LDAP_GROUP_ATTR_NAME

        # Retrieve user LDAP groups
        if not UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_DN:
            self._DEBUG( 'Missing LDAP group search base (DN)' )
            self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        lGroupnames = list()
        if not oLdap:
            return lGroupnames

        # ... LDAP groups
        try:
            lLdapResults = oLdap.search_ext_s(
                UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_DN,
                UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_SCOPE,
                UPWDCHG_PLUGIN_LDAP_GROUP_SEARCH_FILTER.replace( '%{USERNAME}', sUsername ),
                attrlist=[UPWDCHG_PLUGIN_LDAP_GROUP_ATTR_NAME], attrsonly=0
                )
            for tLdapResult in lLdapResults:
                lGroupnames.append( tLdapResult[1][UPWDCHG_PLUGIN_LDAP_GROUP_ATTR_NAME][0] )
        except Exception as e:
            self._DEBUG( 'Failed to perform LDAP group DN search; %s' % str( e ) )
            self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # Done
        return lGroupnames


    def __ldapUnbind( self, oLdap ):

        # LDAP unbind
        if not oLdap:
            return
        try:
            oLdap.unbind_s()
        except Exception as e:
            self._DEBUG( 'Failed to unbind from LDAP server; %s' % str( e ) )


    def __adBind( self, sUsername, sPassword ):
        global \
            UPWDCHG_PLUGIN_AD_URI, \
            UPWDCHG_PLUGIN_AD_ADMIN_DN, \
            UPWDCHG_PLUGIN_AD_ADMIN_PWD

        # Bind to Active Directory server

        # ... Active Directory bind credentials
        if not UPWDCHG_PLUGIN_AD_ADMIN_DN:
            self._DEBUG( 'Missing administrator distinguished name (DN)' )
            self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        sBindDn = UPWDCHG_PLUGIN_AD_ADMIN_DN
        if not UPWDCHG_PLUGIN_AD_ADMIN_PWD:
            sBindPwd=''  # Really!?!
        elif UPWDCHG_PLUGIN_AD_ADMIN_PWD.startswith( 'file://' ):
            __sFile = UPWDCHG_PLUGIN_AD_ADMIN_PWD[7:]
            try:
                __oFile = open( __sFile, 'r' )
                sBindPwd = __oFile.readline()
                __oFile.close()
            except Exception as e:
                self._DEBUG( 'Failed to retrieve Active Directory bind password from file; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        else:
            sBindPwd = UPWDCHG_PLUGIN_AD_ADMIN_PWD

        # ... Active Directory bind
        try:
            oAd = ldap.initialize( UPWDCHG_PLUGIN_AD_URI )
            oAd.protocol_version = ldap.VERSION3
            oAd.bind_s( sBindDn, sBindPwd, ldap.AUTH_SIMPLE )
        except Exception as e:
            self._DEBUG( 'Failed to bind to Active Directory server; %s' % str( e ) )
            self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # Done
        return oAd


    def __adGetUserDn( self, oAd, sUsername ):
        global \
            UPWDCHG_PLUGIN_AD_USER_DN, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER

        # Retrieve Active directory user DN
        if not UPWDCHG_PLUGIN_AD_USER_DN:
            try:
                lAdResults = oAd.search_ext_s(
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER.replace( '%{USERNAME}', sUsername ),
                    attrlist=[ 'dn' ], attrsonly=1, sizelimit=2
                    )
                if not lAdResults:
                    raise Exception( 'user not found' )
                elif len( lAdResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform Active Directory user DN search; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        else:
            try:
                lAdResults = oAd.search_ext_s(
                    UPWDCHG_PLUGIN_AD_USER_DN.replace( '%{USERNAME}', sUsername ),
                    ldap.SCOPE_BASE,
                    'objectClass=*',
                    attrlist=None, attrsonly=0, sizelimit=2
                    )
                if not lAdResults:
                    raise Exception( 'user not found' )
                elif len( lAdResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform Active Directory user DN search; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        sUserDn = lAdResults[0][0]

        # Done
        return sUserDn


    def __adAddUserToGroup( self, oAd, sUsername, sUserDn, sGroupname ):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_AD_GROUP_DN, \
            UPWDCHG_PLUGIN_AD_GROUP_SEARCH_DN, \
            UPWDCHG_PLUGIN_AD_GROUP_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_AD_GROUP_SEARCH_FILTER, \
            UPWDCHG_PLUGIN_AD_GROUP_ATTR_MEMBER, \
            UPWDCHG_PLUGIN_AD_GROUP_ATTR_MEMBER_VALUE, \
            UPWDCHG_PLUGIN_AD_GROUP_CRITICAL

        # Active Directory add user to group

        # ... Active Directory group DN
        if not UPWDCHG_PLUGIN_AD_GROUP_DN:
            try:
                lAdResults = oAd.search_ext_s(
                    UPWDCHG_PLUGIN_AD_GROUP_SEARCH_DN,
                    UPWDCHG_PLUGIN_AD_GROUP_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_AD_GROUP_SEARCH_FILTER.replace( '%{GROUPNAME}', sGroupname ),
                    attrlist=None, attrsonly=0, sizelimit=2
                    )
                if not lAdResults:
                    raise Exception( 'group not found' )
                elif len( lAdResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform Active Directory group DN search; %s' % str( e ) )
                if UPWDCHG_PLUGIN_AD_GROUP_CRITICAL:
                    self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
                else:
                    return
        else:
            try:
                lAdResults = oAd.search_ext_s(
                    UPWDCHG_PLUGIN_AD_GROUP_DN.replace( '%{GROUPNAME}', sGroupname ),
                    ldap.SCOPE_BASE,
                    'objectClass=*',
                    attrlist=None, attrsonly=0, sizelimit=2
                    )
                if not lAdResults:
                    raise Exception( 'group not found' )
                elif len( lAdResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform Active Directory group DN search; %s' % str( e ) )
                if UPWDCHG_PLUGIN_AD_GROUP_CRITICAL:
                    self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
                else:
                    return
        sGroupDn = lAdResults[0][0]

        # ... Active Directory add group membership
        sMembershipAttr = UPWDCHG_PLUGIN_AD_GROUP_ATTR_MEMBER
        sMembershipAttrValue = UPWDCHG_PLUGIN_AD_GROUP_ATTR_MEMBER_VALUE.replace( '%{USERNAME}', sUsername ).replace( '%{USERDN}', sUserDn )
        try:
            lAdResults = oAd.search_ext_s(
                sGroupDn,
                ldap.SCOPE_BASE,
                '(%s=%s)' % ( sMembershipAttr, sMembershipAttrValue ),
                attrlist=None, attrsonly=0, sizelimit=2
                )
            if not lAdResults:
                pass
            elif len( lAdResults ) > 1:
                raise Exception( 'too many match' )
            else:
                return
        except Exception as e:
            self._DEBUG( 'Failed to check Active Directory group membership; %s' % str( e ) )
            if UPWDCHG_PLUGIN_AD_GROUP_CRITICAL:
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        if UPWDCHG_PLUGIN_DRYRUN:
            return
        try:
            lLDIF = [ ( ldap.MOD_ADD, sMembershipAttr, sMembershipAttrValue ) ]
            oAd.modify_s( sGroupDn, lLDIF )
        except Exception as e:
            self._DEBUG( 'Failed to add Active Directory group membership; %s' % str( e ) )
            if UPWDCHG_PLUGIN_AD_GROUP_CRITICAL:
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            else:
                return


    def __adUnbind( self, oAd ):

        # Active Directory unbind
        try:
            oAd.unbind_s()
        except Exception as e:
            self._DEBUG( 'Failed to unbind from Active Directory server; %s' % str( e ) )


    def process( self ):

        # Get token (data)
        dToken = self._getToken()
        sUsername = dToken['username'].encode( 'utf-8' )
        sPasswordOld = dToken['password-old'].encode( 'utf-8' )

        # Process token data
        bUserExists = True

        # ... Active Directory bind
        oAd = self.__adBind( sUsername, sPasswordOld )

        # ... Active directory user DN
        sUserDn = self.__adGetUserDn( oAd, sUsername )

        # ... Active Directory user groups synchronization
        oLdap = self.__ldapBind( sUsername, sPasswordOld )
        lGroupnames = self.__ldapGetGroups( oLdap, sUsername )
        for sGroupname in lGroupnames:
            self.__adAddUserToGroup( oAd, sUsername, sUserDn, sGroupname )
        self.__ldapUnbind( oLdap )

        # ... Active Directory unbind
        self.__adUnbind( oAd )

        # Done
        self._EXIT_OK( 'Active Directory group memberships successfully synchronized' )

# Process
SynchGroupMembersAd().process()
