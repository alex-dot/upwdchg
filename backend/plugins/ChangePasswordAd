#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; coding:utf-8 -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import TokenPlugin
import base64 as B64
import ldap

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO
UPWDCHG_PLUGIN_DRYRUN=True

# ... Active Directory
UPWDCHG_PLUGIN_AD_URI='ldap://ad.example.org:389'
UPWDCHG_PLUGIN_AD_ADMIN_DN='Administrator@EXAMPLE.ORG'  # set to None to bind as user
UPWDCHG_PLUGIN_AD_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_AD_USER_DN=None  # set to None to perform DN search
UPWDCHG_PLUGIN_AD_USER_SEARCH_DN='ou=Users,dc=example,dc=org'
UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER='(&(objectClass=user)(uid=%{USERNAME}))'

# Plugin
class ChangePasswordAd(TokenPlugin):

    def __init__(self):
        global UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG
        TokenPlugin.__init__(self, 'ChangePasswordAd', UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)

    def process(self):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_AD_URI, \
            UPWDCHG_PLUGIN_AD_ADMIN_DN, \
            UPWDCHG_PLUGIN_AD_ADMIN_PWD, \
            UPWDCHG_PLUGIN_AD_USER_DN, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER

        # Check parameters
        if not UPWDCHG_PLUGIN_AD_URI:
            self._DEBUG('Missing server address (URI)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if UPWDCHG_PLUGIN_AD_ADMIN_DN is not None and not UPWDCHG_PLUGIN_AD_ADMIN_DN:
            self._DEBUG('Empty administrator distinguished name (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if UPWDCHG_PLUGIN_AD_USER_DN is not None and not UPWDCHG_PLUGIN_AD_USER_DN:
            self._DEBUG('Empty user distinguished name (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Get token (data)
        oToken = self._getToken()
        sUsername = oToken['username'].encode('utf-8')
        uPasswordNew = oToken['password-new']
        sPasswordNew = uPasswordNew.encode('utf-8')
        if 'password-old' in oToken.keys():
            uPasswordOld = oToken['password-old']
            sPasswordOld = uPasswordOld.encode('utf-8')
        else:
            uPasswordOld = None
            sPasswordOld = None

        # Change AD password

        # ... initialize connection
        try:
            oLdap = ldap.initialize(UPWDCHG_PLUGIN_AD_URI)
            oLdap.protocol_version = ldap.VERSION3
            self._DEBUG('Successfully initialized connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to initialize connection; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind credentials
        try:
            if UPWDCHG_PLUGIN_AD_ADMIN_DN is not None:
                sBindDn = UPWDCHG_PLUGIN_AD_ADMIN_DN
                if not UPWDCHG_PLUGIN_AD_ADMIN_PWD:
                    sBindPwd=''  # Really!?!
                elif UPWDCHG_PLUGIN_AD_ADMIN_PWD.startswith('file://'):
                    sFile = UPWDCHG_PLUGIN_AD_ADMIN_PWD[7:]
                    try:
                        oFile = open(sFile, 'r')
                        sBindPwd = oFile.readline()
                        oFile.close()
                    except Exception as e:
                        self._DEBUG('Failed to retrieve bind password from file; %s' % str(e))
                        self._EXIT_ERROR('Internal error; please contact your system administrator')
                else:
                    sBindPwd = UPWDCHG_PLUGIN_AD_ADMIN_PWD
            elif UPWDCHG_PLUGIN_AD_USER_DN is not None:
                sBindDn = UPWDCHG_PLUGIN_AD_USER_DN.replace('%{USERNAME}', sUsername)
                sBindPwd = sPasswordOld
            else:
                self._DEBUG('Both administrator and user distinguished name (DN) are unset; cannot bind')
                self._EXIT_ERROR('Internal error; please contact your system administrator')
            self._DEBUG('Binding to server as: %s' % sBindDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve bind credentials; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind to server
        try:
            oLdap.bind_s(sBindDn, sBindPwd, ldap.AUTH_SIMPLE)
            self._DEBUG('Successfully bound to server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to bind to server; %s' % str(e))
            if UPWDCHG_PLUGIN_AD_ADMIN_DN is not None:
                self._EXIT_ERROR('Internal error; please contact your system administrator')
            else:
                self._EXIT_ERROR('Invalid credentials')

        # ... user DN
        try:
            if UPWDCHG_PLUGIN_AD_USER_DN is None:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER.replace('%{USERNAME}', sUsername),
                    attrlist=['dn'], attrsonly=1, sizelimit=2
                    )
                if not lLdapResults:
                    raise Exception('user not found: %s' % sUsername)
                elif len(lLdapResults) > 1:
                    raise Exception('too many match: %s' % sUsername)
                (sUserDn, dAttrs) = lLdapResults[0]
            else:
                sUserDn = UPWDCHG_PLUGIN_AD_USER_DN.replace('%{USERNAME}', sUsername)
            self._DEBUG('Successfully retrieved user: %s' % sUserDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve user; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... password change
        #     REF: http://support.microsoft.com/kb/263991
        try:
            if not UPWDCHG_PLUGIN_DRYRUN:
                if UPWDCHG_PLUGIN_AD_ADMIN_DN is not None:
                    lLDIF = [
                        (ldap.MOD_REPLACE, 'unicodePwd', ('"%s"' % uPasswordNew).encode('utf-16-le')),
                    ]
                else:
                    lLDIF = [
                        (ldap.MOD_DELETE, 'unicodePwd', ('"%s"' % uPasswordOld).encode('utf-16-le')),
                        (ldap.MOD_ADD, 'unicodePwd', ('"%s"' % uPasswordNew).encode('utf-16-le')),
                    ]
                oLdap.modify_s(sUserDn, lLDIF)
                self._DEBUG('Successfully changed password for user: %s' % sUserDn, TokenPlugin.DEBUG_INFO)
            else:
                self._DEBUG('DRY-RUN! NOT changing password for user: %s' % sUserDn, TokenPlugin.DEBUG_WARNING)
        except Exception as e:
            self._DEBUG('Failed to change password; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... unbind from server
        try:
            oLdap.unbind_s()
            self._DEBUG('Successfully unbound from server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to unbind from server; %s' % str(e))

        # Done
        self._EXIT_OK('Password successfully changed')

# Process
ChangePasswordAd().process()
