#!/usr/bin/env python
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; coding:utf-8 -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#

# Modules
# ... deb: python-ldap
from UPwdChg import TokenPlugin
import base64 as B64
import ldap
import ldap.modlist
import re

# Parameters
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DRYRUN=True
# ... (destination) Active Directory
UPWDCHG_PLUGIN_AD_URI='ldap://ad.example.org:389'
UPWDCHG_PLUGIN_AD_ADMIN_DN='Administrator@AD.EXAMPLE.ORG'  # MUST be specified
UPWDCHG_PLUGIN_AD_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_AD_USER_DN=None  # set to None to perform DN search
UPWDCHG_PLUGIN_AD_USER_SEARCH_DN='cn=Users,dc=ad,dc=example,dc=org'
UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER='uid=%{USERNAME}'
# ... user account creation attributes;
#     'dn' attribute MUST be set, others are up to you (or AD requirements)
#     required "system" attributes ('objectClass', 'userAccountControl') will be set automatically
#     %{LDAP:<attr>} are subsituted with the given LDAP attribute (see LDAP directory settings below)
UPWDCHG_PLUGIN_AD_USER_ATTRS=dict()
UPWDCHG_PLUGIN_AD_USER_ATTRS['dn']='cn=%{LDAP:cn},cn=Users,dc=ad,dc=example,dc=org'
UPWDCHG_PLUGIN_AD_USER_ATTRS['cn']='%{LDAP:cn}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['sn']='%{LDAP:sn}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['givenName']='%{LDAP:givenName}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['name']='%{LDAP:displayName}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['uid']='%{USERNAME}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['sAMAccountName']='%{USERNAME}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['userPrincipalName']='%{USERNAME}@AD.EXAMPLE.ORG'
UPWDCHG_PLUGIN_AD_USER_ATTRS['unixHomeDirectory']='/home/%{USERNAME}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['homeDirectory']='\\\\ad.example.org\\%{USERNAME}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['homeDrive']='Z:'
UPWDCHG_PLUGIN_AD_USER_ATTRS['mail']='%{LDAP:mail}'
UPWDCHG_PLUGIN_AD_USER_CONTROL_FLAGS=0  # 'userAccountControl' additional flags (http://support.microsoft.com/kb/305144)
# ... (source) LDAP directory
UPWDCHG_PLUGIN_LDAP_URI='ldap://ldap.example.org:389'  # if None, LDAP (source) is ignored
UPWDCHG_PLUGIN_LDAP_ADMIN_DN='cn=admin,dc=example,dc=org'  # set to None to bind as user
UPWDCHG_PLUGIN_LDAP_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_LDAP_USER_DN='uid=%{USERNAME},ou=users,dc=example,dc=org'  # set to None to perform DN search
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN=None
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER=None

# Plugin
class CreateAccountAd(TokenPlugin):

    def __init__( self ):
        global UPWDCHG_PLUGIN_CRITICAL
        TokenPlugin.__init__( self, 'CreateAccountAd', UPWDCHG_PLUGIN_CRITICAL )
        # ... fields
        self.__reLdapVariables = re.compile( '%{LDAP:[^}]*}' )


    def __getLdapAttributes( self, sUsername, sPassword ):
        global \
            UPWDCHG_PLUGIN_LDAP_URI, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_DN, \
            UPWDCHG_PLUGIN_LDAP_ADMIN_PWD, \
            UPWDCHG_PLUGIN_LDAP_USER_DN, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER

        # Attributes
        dAttrs = dict()
        if not UPWDCHG_PLUGIN_LDAP_URI:
            return dAttrs


        # Query LDAP server

        # ... LDAP bind credentials
        if UPWDCHG_PLUGIN_LDAP_ADMIN_DN is not None:
            sBindDn = UPWDCHG_PLUGIN_LDAP_ADMIN_DN
            if UPWDCHG_PLUGIN_LDAP_ADMIN_PWD is None:
                sBindPwd=''  # Really!?!
            elif UPWDCHG_PLUGIN_LDAP_ADMIN_PWD.startswith( 'file://' ):
                __sFile = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD[7:]
                try:
                    __oFile = open( __sFile, 'r' )
                    sBindPwd = __oFile.readline()
                    __oFile.close()
                except Exception as e:
                    self._DEBUG( 'Failed to retrieve LDAP bind password from file; %s' % str( e ) )
                    self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            else:
                sBindPwd = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD
        else:
            sBindDn = UPWDCHG_PLUGIN_LDAP_USER_DN.replace( '%{USERNAME}', sUsername )
            sBindPwd = sPassword

        # ... LDAP bind
        try:
            oLdap = ldap.initialize( UPWDCHG_PLUGIN_LDAP_URI )
            oLdap.protocol_version = ldap.VERSION3
            oLdap.bind_s( sBindDn, sBindPwd, ldap.AUTH_SIMPLE )
        except Exception as e:
            self._DEBUG( 'Failed to bind to LDAP server; %s' % str( e ) )
            if UPWDCHG_PLUGIN_LDAP_ADMIN_DN is not None:
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            else:
                self._EXIT_ERROR( 'Invalid LDAP credentials' )

        # ... LDAP user DN
        if UPWDCHG_PLUGIN_LDAP_USER_DN is None:
            try:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER.replace( '%{USERNAME}', sUsername ),
                    attrlist=None, attrsonly=0, sizelimit=2
                    )
                if not lLdapResults:
                    raise Exception( 'user not found' )
                elif len( lLdapResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform LDAP user DN search; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        else:
            sUserDn = UPWDCHG_PLUGIN_LDAP_USER_DN.replace( '%{USERNAME}', sUsername )
            try:
                lLdapResults = oLdap.search_ext_s(
                    sUserDn,
                    ldap.SCOPE_BASE,
                    'objectClass=*',
                    attrlist=None, attrsonly=0, sizelimit=2
                    )
                if not lLdapResults:
                    raise Exception( 'user not found' )
                elif len( lLdapResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform Active Directory user DN search; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        ( sUserDn, dAttrs ) = lLdapResults[0]

        # ... LDAP unbind
        try:
            oLdap.unbind_s()
        except Exception as e:
            self._DEBUG( 'Failed to unbind from LDAP server; %s' % str( e ) )

        # Done
        return dAttrs


    def process( self ):
        global \
            UPWDCHG_PLUGIN_DRYRUN, \
            UPWDCHG_PLUGIN_AD_URI, \
            UPWDCHG_PLUGIN_AD_ADMIN_DN, \
            UPWDCHG_PLUGIN_AD_ADMIN_PWD, \
            UPWDCHG_PLUGIN_AD_USER_DN, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_DN, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE, \
            UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER, \
            UPWDCHG_PLUGIN_AD_USER_ATTRS, \
            UPWDCHG_PLUGIN_AD_USER_CONTROL_FLAGS

        # Get token (data)
        dToken = self._getToken()
        sUsername = dToken['username'].encode( 'utf-8' )
        sPasswordOld = dToken['password-old'].encode( 'utf-8' )
        sPasswordNew = dToken['password-new'].encode( 'utf-8' )

        # Process token data
        bUserExists = True

        # ... Active Directory bind credentials
        if UPWDCHG_PLUGIN_AD_ADMIN_DN is None:
            self._DEBUG( 'Missing administrator distinguished name (DN)' )
            self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        sBindDn = UPWDCHG_PLUGIN_AD_ADMIN_DN
        if UPWDCHG_PLUGIN_AD_ADMIN_PWD is None:
            sBindPwd=''  # Really!?!
        elif UPWDCHG_PLUGIN_AD_ADMIN_PWD.startswith( 'file://' ):
            __sFile = UPWDCHG_PLUGIN_AD_ADMIN_PWD[7:]
            try:
                __oFile = open( __sFile, 'r' )
                sBindPwd = __oFile.readline()
                __oFile.close()
            except Exception as e:
                self._DEBUG( 'Failed to retrieve Active Directory bind password from file; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
        else:
            sBindPwd = UPWDCHG_PLUGIN_AD_ADMIN_PWD

        # ... Active Directory bind
        try:
            oLdap = ldap.initialize( UPWDCHG_PLUGIN_AD_URI )
            oLdap.protocol_version = ldap.VERSION3
            oLdap.bind_s( sBindDn, sBindPwd, ldap.AUTH_SIMPLE )
        except Exception as e:
            self._DEBUG( 'Failed to bind to Active Directory server; %s' % str( e ) )
            self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # ... Active directory user DN
        if UPWDCHG_PLUGIN_AD_USER_DN is None:
            try:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER.replace( '%{USERNAME}', sUsername ),
                    attrlist=[ 'dn' ], attrsonly=1, sizelimit=2
                    )
                if not lLdapResults:
                    bUserExists = False
                elif len( lLdapResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform Active Directory user DN search; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            if bUserExists:
                ( sUserDn, dAttrs ) = lLdapResults[0]
        else:
            sUserDn = UPWDCHG_PLUGIN_AD_USER_DN.replace( '%{USERNAME}', sUsername )
            try:
                lLdapResults = oLdap.search_ext_s(
                    sUserDn,
                    ldap.SCOPE_BASE,
                    'objectClass=*',
                    attrlist=[ 'dn' ], attrsonly=1, sizelimit=2
                    )
                if not lLdapResults:
                    bUserExists = False
                elif len( lLdapResults ) > 1:
                    raise Exception( 'too many match' )
            except Exception as e:
                self._DEBUG( 'Failed to perform Active Directory user DN search; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # ... Active Directory user account creation
        if not bUserExists:
            if not 'dn' in UPWDCHG_PLUGIN_AD_USER_ATTRS:
                self._DEBUG( 'Missing Active Directory user DN attribute' )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )
            # ... populate "custom" attributes
            dAttrsLdap = self.__getLdapAttributes( sUsername, sPasswordOld )
            dAttrsAd = dict()
            for sKeyAd in UPWDCHG_PLUGIN_AD_USER_ATTRS.iterkeys():
                sAttr = UPWDCHG_PLUGIN_AD_USER_ATTRS[sKeyAd]
                sAttr = sAttr.replace( '%{USERNAME}', sUsername )
                for sKeyLdap in dAttrsLdap.iterkeys():
                    sAttr = sAttr.replace( '%%{LDAP:%s}' % sKeyLdap, dAttrsLdap[sKeyLdap][0] )
                sAttr = self.__reLdapVariables.sub( '', sAttr )
                dAttrsAd[sKeyAd] = sAttr
            # ... populate "system" attributes
            sUserDn = dAttrsAd['dn']
            dAttrsAd.pop( 'dn', None )
            dAttrsAd['objectClass'] = [ 'top', 'person', 'organizationalPerson', 'user' ]
            dAttrsAd['userAccountControl'] = '514'
            # ... create account
            if not UPWDCHG_PLUGIN_DRYRUN:
                try:
                    lLDIF = ldap.modlist.addModlist( dAttrsAd )
                    oLdap.add_s( sUserDn, lLDIF )
                except Exception as e:
                    self._DEBUG( 'Failed to create Active Directory user account; %s' % str( e ) )
                    self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # ... Active Directory password change
        #     REF: http://support.microsoft.com/kb/263991
        if not UPWDCHG_PLUGIN_DRYRUN:
            try:
                lLDIF = [
                    ( ldap.MOD_REPLACE, 'unicodePwd', ( '"%s"' % dToken['password-new'] ).encode( 'utf-16-le' ) ),
                ]
                oLdap.modify_s( sUserDn, lLDIF )
            except Exception as e:
                self._DEBUG( 'Failed to change Active Directory password; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # ... Active Directory account activation (control)
        #     REF: http://support.microsoft.com/kb/305144
        if not bUserExists and not UPWDCHG_PLUGIN_DRYRUN:
            try:
                lLDIF = [
                    ( ldap.MOD_REPLACE, 'userAccountControl', ( '%d' % ( 512 | UPWDCHG_PLUGIN_AD_USER_CONTROL_FLAGS ) ) ),
                ]
                oLdap.modify_s( sUserDn, lLDIF )
            except Exception as e:
                self._DEBUG( 'Failed to activate Active Directory user account; %s' % str( e ) )
                self._EXIT_ERROR( 'Internal error; please contact your system administrator' )

        # ... Active Directory unbind
        try:
            oLdap.unbind_s()
        except Exception as e:
            self._DEBUG( 'Failed to unbind from Active Directory server; %s' % str( e ) )

        # Done
        if bUserExists:
            self._EXIT_OK( 'Active Directory password successfully changed' )
        else:
            self._EXIT_OK( 'Active Directory user account successfully created' )

# Process
CreateAccountAd().process()
