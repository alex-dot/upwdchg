#!/usr/bin/env python3
# -*- mode:python; tab-width:4; c-basic-offset:4; intent-tabs-mode:nil; coding:utf-8 -*-
# ex: filetype=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent smartindent

#
# Universal Password Changer (UPwdChg)
# Copyright (C) 2014-2018 Cedric Dufour <http://cedric.dufour.name>
# Author: Cedric Dufour <http://cedric.dufour.name>
#
# The Universal Password Changer (UPwdChg) is free software:
# you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, Version 3.
#
# The Universal Password Changer (UPwdChg) is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details.
#
# SPDX-License-Identifier: GPL-3.0
# License-Filename: LICENSE/GPL-3.0.txt
#

#------------------------------------------------------------------------------
# DEPENDENCIES
#------------------------------------------------------------------------------

# UPwdChg
from UPwdChg import TokenPlugin

# Extra
# ... deb: python3-ldap
import ldap
import ldap.modlist

# Standard
import re


#------------------------------------------------------------------------------
# CONFIGURATION
#------------------------------------------------------------------------------

# UPwdChg
UPWDCHG_PLUGIN_NAME='CreateAccountAd'
UPWDCHG_PLUGIN_CRITICAL=True
UPWDCHG_PLUGIN_DEBUG=TokenPlugin.DEBUG_INFO
UPWDCHG_PLUGIN_DRYRUN=True

# LDAP directory (source)
UPWDCHG_PLUGIN_LDAP_URI='ldap://ldap.example.org:389'  # if None, no LDAP synchronization is performed
UPWDCHG_PLUGIN_LDAP_ADMIN_DN='cn=admin,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_LDAP_USER_DN='uid=%{USERNAME},ou=users,dc=example,dc=org'  # set to None to perform DN search
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN='ou=users,dc=example,dc=org'
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER='(&(objectClass=posixAccount)(uid=%{USERNAME}))'

# Active Directory (destination)
UPWDCHG_PLUGIN_AD_URI='ldap://ad.example.org:389'
UPWDCHG_PLUGIN_AD_ADMIN_DN='Administrator@EXAMPLE.ORG'
UPWDCHG_PLUGIN_AD_ADMIN_PWD=''  # prefix with 'file://' to get password from specified file
UPWDCHG_PLUGIN_AD_USER_SEARCH_DN='ou=Users,dc=example,dc=org'
UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE=ldap.SCOPE_ONELEVEL
UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER='(&(objectClass=user)(uid=%{USERNAME}))'
# ... user account creation attributes
#     'dn' attribute MUST be set, others are up to you (http://msdn.microsoft.com/en-us/library/ms677943%28v=vs.85%29.aspx)
#     required "system" attributes ('objectClass', 'userAccountControl') will be set automatically
#     %{LDAP:<attr>} are subsituted with the given LDAP attribute
#     (binary) attributes defined as bytes-array will be copied "as is" (without charset decoding/encoding)
UPWDCHG_PLUGIN_AD_USER_CLASSES=[ 'top', 'person', 'organizationalPerson', 'user' ]
UPWDCHG_PLUGIN_AD_USER_ATTRS=dict()
UPWDCHG_PLUGIN_AD_USER_ATTRS['dn']='cn=%{LDAP:cn},ou=Users,dc=example,dc=org'
UPWDCHG_PLUGIN_AD_USER_ATTRS['cn']='%{LDAP:cn}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['sn']='%{LDAP:sn}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['givenName']='%{LDAP:givenName}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['name']='%{LDAP:displayName}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['uid']='%{LDAP:uid}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['uidNumber']='%{LDAP:uidNumber}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['sAMAccountName']='%{USERNAME}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['userPrincipalName']='%{USERNAME}@EXAMPLE.ORG'
UPWDCHG_PLUGIN_AD_USER_ATTRS['unixHomeDirectory']='/home/%{USERNAME}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['homeDirectory']='\\\\ad.example.org\\%{USERNAME}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['homeDrive']='Z:'
UPWDCHG_PLUGIN_AD_USER_ATTRS['mail']='%{LDAP:mail}'
UPWDCHG_PLUGIN_AD_USER_ATTRS['description']='%{LDAP:description}'
UPWDCHG_PLUGIN_AD_USER_CONTROL_FLAGS=0  # 'userAccountControl' additional flags (http://support.microsoft.com/kb/305144)


#------------------------------------------------------------------------------
# PLUGIN
#------------------------------------------------------------------------------

class CreateAccountAd(TokenPlugin):

    def __init__(self):
        TokenPlugin.__init__(self, UPWDCHG_PLUGIN_NAME, UPWDCHG_PLUGIN_CRITICAL, UPWDCHG_PLUGIN_DEBUG)
        # ... fields
        self.__reLdapVariables = re.compile('%{LDAP:([^}]*)}')


    def __ldapBind(self):
        # Check configuration
        if UPWDCHG_PLUGIN_LDAP_URI is None:
            return None
        if not UPWDCHG_PLUGIN_LDAP_ADMIN_DN:
            self._DEBUG('Missing (LDAP) administrator distinguished name (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Bind to server
        oLdap = None

        # ... initialize connection
        try:
            oLdap = ldap.initialize(UPWDCHG_PLUGIN_LDAP_URI)
            oLdap.protocol_version = ldap.VERSION3
            self._DEBUG('Successfully initialized (LDAP) connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to initialize (LDAP) connection; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind credentials
        try:
            sBindDn = UPWDCHG_PLUGIN_LDAP_ADMIN_DN
            if not UPWDCHG_PLUGIN_LDAP_ADMIN_PWD:
                sBindPwd=''  # Really!?!
            elif UPWDCHG_PLUGIN_LDAP_ADMIN_PWD.startswith('file://'):
                sFile = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD[7:]
                try:
                    oFile = open(sFile, 'r')
                    sBindPwd = oFile.readline()
                    oFile.close()
                except Exception as e:
                    self._DEBUG('Failed to retrieve (LDAP) bind password from file; %s' % str(e))
                    self._EXIT_ERROR('Internal error; please contact your system administrator')
            else:
                sBindPwd = UPWDCHG_PLUGIN_LDAP_ADMIN_PWD
            self._DEBUG('Binding to (LDAP) server as: %s' % sBindDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve (LDAP) bind credentials; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind to server
        try:
            oLdap.bind_s(sBindDn, sBindPwd, ldap.AUTH_SIMPLE)
            self._DEBUG('Successfully bound to (LDAP) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to bind to (LDAP) server; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return oLdap


    def __ldapGetAttributes(self, oLdap, sUsername):
        # Check configuration
        if UPWDCHG_PLUGIN_LDAP_USER_DN is not None and not UPWDCHG_PLUGIN_LDAP_USER_DN:
            self._DEBUG('Empty (LDAP) user distinguished name (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Return variable
        dAttrs = dict()

        # Retrieve user attributes

        # ... user DN
        try:
            if UPWDCHG_PLUGIN_LDAP_USER_DN is None:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_DN,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_SCOPE,
                    UPWDCHG_PLUGIN_LDAP_USER_SEARCH_FILTER.replace('%{USERNAME}', sUsername),
                    attrlist=None, attrsonly=0, sizelimit=2
                    )
            else:
                lLdapResults = oLdap.search_ext_s(
                    UPWDCHG_PLUGIN_LDAP_USER_DN.replace('%{USERNAME}', sUsername),
                    ldap.SCOPE_BASE,
                    '(objectClass=*)',
                    attrlist=None, attrsonly=0, sizelimit=2
                    )
            if not lLdapResults:
                raise Exception('user not found: %s' % sUsername)
            elif len(lLdapResults) > 1:
                raise Exception('too many match: %s' % sUsername)
            dAttrs = lLdapResults[0][1]
            self._DEBUG('Successfully retrieved user attributes from (LDAP) server:\n%s' % str(dAttrs), TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve user attributes from (LDAP) server; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return dAttrs


    def __ldapUnbind(self, oLdap):
        # Unbind from server
        try:
            oLdap.unbind_s()
            self._DEBUG('Successfully unbound from (LDAP) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to unbind from (LDAP) server; %s' % str(e))


    def __adBind(self):
        # Check configuration
        if not UPWDCHG_PLUGIN_AD_URI:
            self._DEBUG('Missing (AD) server address (URI)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')
        if not UPWDCHG_PLUGIN_AD_ADMIN_DN:
            self._DEBUG('Missing (AD) administrator distinguished name (DN)')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Bind to server

        # ... initialize connection
        try:
            oAd = ldap.initialize(UPWDCHG_PLUGIN_AD_URI)
            oAd.protocol_version = ldap.VERSION3
            self._DEBUG('Successfully initialized (AD) connection', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to initialize (AD) connection; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind credentials
        try:
            sBindDn = UPWDCHG_PLUGIN_AD_ADMIN_DN
            if not UPWDCHG_PLUGIN_AD_ADMIN_PWD:
                sBindPwd=''  # Really!?!
            elif UPWDCHG_PLUGIN_AD_ADMIN_PWD.startswith('file://'):
                sFile = UPWDCHG_PLUGIN_AD_ADMIN_PWD[7:]
                try:
                    oFile = open(sFile, 'r')
                    sBindPwd = oFile.readline()
                    oFile.close()
                except Exception as e:
                    self._DEBUG('Failed to retrieve (AD) bind password from file; %s' % str(e))
                    self._EXIT_ERROR('Internal error; please contact your system administrator')
            else:
                sBindPwd = UPWDCHG_PLUGIN_AD_ADMIN_PWD
            self._DEBUG('Binding to (AD) server as: %s' % sBindDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve (AD) bind credentials; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # ... bind to server
        try:
            oAd.bind_s(sBindDn, sBindPwd, ldap.AUTH_SIMPLE)
            self._DEBUG('Successfully bound to (AD) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to bind to (AD) server; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return oAd


    def __adGetUserDn(self, oAd, sUsername):
        # Retrieve user DN
        try:
            lAdResults = oAd.search_ext_s(
                UPWDCHG_PLUGIN_AD_USER_SEARCH_DN,
                UPWDCHG_PLUGIN_AD_USER_SEARCH_SCOPE,
                UPWDCHG_PLUGIN_AD_USER_SEARCH_FILTER.replace('%{USERNAME}', sUsername),
                attrlist=None, attrsonly=1, sizelimit=2
                )
            if not lAdResults:
                return None
            elif len(lAdResults) > 1:
                raise Exception('too many match')
            sUserDn = lAdResults[0][0]
            self._DEBUG('Successfully retrieved (AD) user: %s' % sUserDn, TokenPlugin.DEBUG_TRACE)
        except Exception as e:
            self._DEBUG('Failed to retrieve (AD) user; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return sUserDn


    def __adCreateAccount(self, oAd, sUsername, oLdap=None):
        # Check configuration
        if not 'dn' in UPWDCHG_PLUGIN_AD_USER_ATTRS:
            self._DEBUG('Missing (AD) user distinguished name (DN) attribute')
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # User account creation

        # ... populate "custom" attributes
        dAttrsLdap = dict()
        if oLdap:
            dAttrsLdap = self.__ldapGetAttributes(oLdap, sUsername)
        dAttrsAd = dict()
        for sKeyAd in UPWDCHG_PLUGIN_AD_USER_ATTRS.keys():
            sbyAttr = UPWDCHG_PLUGIN_AD_USER_ATTRS[sKeyAd]
            if isinstance(sbyAttr, bytes):
                try:
                    sAttr = sbyAttr.decode('utf-8')
                    sAttr_novars = self.__reLdapVariables.sub('', sAttr)
                    if len(sAttr_novars):
                        if len(sAttr_novars) == len(sAttr):
                            self._DEBUG('AD binary attribute copied "as is": %s' % sKeyAd, TokenPlugin.DEBUG_TRACE)
                            dAttrsAd[sKeyAd] = sbyAttr
                        else:
                            self._DEBUG('AD binary attribute must map LDAP attribute without extraneous data: %s' % sKeyAd)
                            self._EXIT_ERROR('Internal error; please contact your system administrator')
                    else:
                        lsKeysLdap = self.__reLdapVariables.findall(sAttr)
                        if len(lsKeysLdap) > 1:
                            self._DEBUG('AD binary attribute must map to a single LDAP attribute: %s' % sKeyAd)
                            self._EXIT_ERROR('Internal error; please contact your system administrator')
                        for sKeyLdap in lsKeysLdap:
                            if sKeyLdap not in dAttrsLdap.keys(): continue
                            dAttrsAd[sKeyAd] = dAttrsLdap[sKeyLdap][0]
                except UnicodeDecodeError:
                    self._DEBUG('AD binary attribute copied "as is": %s' % sKeyAd, TokenPlugin.DEBUG_TRACE)
                    dAttrsAd[sKeyAd] = sbyAttr
            else:
                sAttr = sbyAttr.replace('%{USERNAME}', sUsername)
                lsKeysLdap = self.__reLdapVariables.findall(sAttr)
                for sKeyLdap in lsKeysLdap:
                    if sKeyLdap not in dAttrsLdap.keys(): continue
                    sAttr = sAttr.replace('%%{LDAP:%s}' % sKeyLdap, dAttrsLdap[sKeyLdap][0].decode('utf-8'))
                sAttr = self.__reLdapVariables.sub('', sAttr)
                dAttrsAd[sKeyAd] = sAttr.encode('utf-8')

        # ... populate "system" attributes
        sUserDn = dAttrsAd['dn'].decode('utf-8')
        dAttrsAd.pop('dn', None)
        dAttrsAd['objectClass'] = [i if isinstance(i, bytes) else i.encode('utf-8') for i in UPWDCHG_PLUGIN_AD_USER_CLASSES]
        dAttrsAd['userAccountControl'] = b'514'
        self._DEBUG('Successfully created user attributes for (AD) server:\n%s' % str(dAttrsAd), TokenPlugin.DEBUG_TRACE)

        # ... create account
        if UPWDCHG_PLUGIN_DRYRUN:
            self._DEBUG('DRY-RUN! NOT creating (AD) user: %s' % sUserDn, TokenPlugin.DEBUG_WARNING)
            return sUserDn
        try:
            lLDIF = ldap.modlist.addModlist(dAttrsAd)
            oAd.add_s(sUserDn, lLDIF)
            self._DEBUG('Successfully created (AD) user: %s' % sUserDn, TokenPlugin.DEBUG_INFO)
        except Exception as e:
            self._DEBUG('Failed to create (AD) user account; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')

        # Done
        return sUserDn


    def __adChangePassword(self, oAd, sUserDn, sPasswordNew):
        if UPWDCHG_PLUGIN_DRYRUN:
            self._DEBUG('DRY-RUN! NOT changing (AD) password for user: %s' % sUserDn, TokenPlugin.DEBUG_WARNING)
            return

        # Password change
        # REF: http://support.microsoft.com/kb/263991
        try:
            lLDIF = [
                (ldap.MOD_REPLACE, 'unicodePwd', ('"%s"' % sPasswordNew).encode('utf-16-le')),
                ]
            oAd.modify_s(sUserDn, lLDIF)
            self._DEBUG('Successfully changed (AD) password for user: %s' % sUserDn, TokenPlugin.DEBUG_INFO)
        except Exception as e:
            self._DEBUG('Failed to change (AD) password; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')


    def __adEnableAccount(self, oAd, sUserDn):
        if UPWDCHG_PLUGIN_DRYRUN:
            self._DEBUG('DRY-RUN! NOT enabling (AD) user account: %s' % sUserDn, TokenPlugin.DEBUG_WARNING)
            return

        # Account activation (control)
        # REF: http://support.microsoft.com/kb/305144
        try:
            lLDIF = [
                (ldap.MOD_REPLACE, 'userAccountControl', ('%d' % (512 | UPWDCHG_PLUGIN_AD_USER_CONTROL_FLAGS)).encode('utf-8')),
                ]
            oAd.modify_s(sUserDn, lLDIF)
            self._DEBUG('Successfully enabled (AD) user account: %s' % sUserDn, TokenPlugin.DEBUG_INFO)
        except Exception as e:
            self._DEBUG('Failed to activate (AD) user account; %s' % str(e))
            self._EXIT_ERROR('Internal error; please contact your system administrator')


    def __adUnbind(self, oAd):
        # Unbind
        try:
            oAd.unbind_s()
            self._DEBUG('Successfully bound to (AD) server', TokenPlugin.DEBUG_NOTICE)
        except Exception as e:
            self._DEBUG('Failed to unbind from (AD) server; %s' % str(e))


    def process(self):
        # Get token (data)
        oToken = self._getToken()
        sUsername = oToken['username']
        sPasswordNew = oToken['password-new']

        # Process token data
        bUserExists = True

        # ... Active Directory bind
        oAd = self.__adBind()

        # ... Active directory user DN
        bUserExists = False
        sUserDn = self.__adGetUserDn(oAd, sUsername)
        if sUserDn:
            bUserExists = True
            self._DEBUG('(AD) user account already exists (its password will be updated): %s' % sUserDn, TokenPlugin.DEBUG_NOTICE)
        else:
            self._DEBUG('(AD) user account does not exists (and will be created): %s' % sUsername, TokenPlugin.DEBUG_NOTICE)

        # ... Active Directory user account creation
        if not bUserExists or UPWDCHG_PLUGIN_DRYRUN:
            oLdap = self.__ldapBind()
            sUserDn = self.__adCreateAccount(oAd, sUsername, oLdap)

        # ... Active Directory password change
        self.__adChangePassword(oAd, sUserDn, sPasswordNew)

        # ... Active Directory user account activation
        if not bUserExists or UPWDCHG_PLUGIN_DRYRUN:
            self.__adEnableAccount(oAd, sUserDn)
            if oLdap:
                self.__ldapUnbind(oLdap)

        # ... Active Directory unbind
        self.__adUnbind(oAd)

        # Done
        if bUserExists:
            self._EXIT_OK('Password successfully changed')
        else:
            self._EXIT_OK('Account successfully created')


# Process
CreateAccountAd().process()
